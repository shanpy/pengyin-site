.. title: Bug Report
.. date: 2016-06-30
.. category: Bug Report
.. tags: Bug Report, draft
.. slug: bug-report
.. authors: Pengyin Shan

Recently I read a <a href="https://henrikwarne.com/2016/04/28/learning-from-your-bugs/">post aout Learning from Your Bugs</a>, written by *Henrik Warne*. This post mentions the importance of record and learning from the bug. I would like to follow it.

<!-- TEASER_END -->



#Template

    :::text
    Date:
    2004-08-17

    Symptom:
    Infinite loop when decoding Q.931 message

    Cause:
    When an unknown element id is found in a Q.931 message, we try
    to skip it by reading the length, and advancing the pos pointer
    that many bytes. However, in this case the length was zero,
    causing us to try to skip the same element id over and over.

    How found:
    This happened during parsing of a setup message taken from an
    Ethereal trace from Nortel. Their message was 1016 bytes long
    (it included a lot of fast start elements), but our MSG_MAX_LEN
    was 1000. Normally we then receive a truncated message from
    common/Communication.cxx, but now, when fed directly in to be
    parsed, memory past the end of the array was accessed, and it
    happened to be zero, exposing this problem.
    To find it, I just added a few print outs in the q931 parsing
    code. But it was lucky that the data happened to be zero.

    Fix:
    If the length given is zero, set it to one. This way we always
    move forward.

    Fixed in file(s):
    callh/q931_msg.cxx

    Caused by me:
    Yes

    Time taken to resolve bug:
    1 hour

    Lessons:
    Trusted the data received in an incoming message. It's not
    just giving huge numbers that can cause problems. Indicating
    a length of zero could be just as bad.

#2016-06-30

##Symption

In cascade server, I don't know how to refer to another file in
distinct javascript file.

##Cause

When using `sass.sync.js`, I need to refer external `scss` file in a distinct JavaScript file

##How Found

When I tried to learn `sass.js` to write a simple SASS compile inside cascade server, with Apache Velocity involved in.

Problem code part:

    :::javascript
    console.log(location.pathname);
    var basic = "../../../sass"; //How to refer this in cascade?
        var directory = "../../../css"; //There is always a `sass` directory at the beginning of referencing directory
        var files = [
                '_basics.scss'
            ];
        Sass.preloadFiles(basic, directory, files, function() { console.log('files loaded') });

##Fix

##Fix in file(s)

##Caused by me

Yes

##Time taken to resolve bug

Around 1 day

##Lessons