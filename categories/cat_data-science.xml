<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Wendy's Corner (Posts about Data Science)</title><link>https://www.pengyin-shan.com/</link><description></description><atom:link type="application/rss+xml" rel="self" href="https://www.pengyin-shan.com/categories/cat_data-science.xml"></atom:link><language>en</language><copyright>Contents Â© 2018 &lt;a href="mailto:pengyin.shan@outlook.com"&gt;Pengyin(Wendy) Shan&lt;/a&gt; </copyright><lastBuildDate>Sun, 18 Nov 2018 04:25:31 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Meeting Notes for 'From Dirty to Decisive: Using Clean Data to Your Advantage'</title><link>https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/</link><dc:creator>Pengyin(Wendy) Shan</dc:creator><description>&lt;div&gt;&lt;div class="toc"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#solution-for-making-decision-based-on-large-set-of-data"&gt;Solution for Making Decision based on Large Set of Data&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#how-data-impacts-decision"&gt;How Data Impacts Decision&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#two-kinds-of-people-in-decision-making-process"&gt;Two Kinds of People in Decision Making Process&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#ignore-data-scraps-and-less-hunting"&gt;Ignore Data Scraps and Less Hunting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#the-decision-making-modal"&gt;The Decision Making Modal&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#decision"&gt;Decision&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#supported-materials"&gt;Supported Materials&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#modals"&gt;Modals&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#the-decision-making-process"&gt;The Decision Making Process&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#step-1-decision-driven-decision-making"&gt;Step 1: Decision-Driven Decision Making&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#what-do-we-want-to-achieve"&gt;What do we want to achieve?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#step-2-find-answers-to-questions"&gt;Step 2: Find answers to questions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#step-3-clean-it-up"&gt;Step 3: Clean it up&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#process-in-place-before-cleaning"&gt;Process in place before cleaning&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#how-to-clean-data"&gt;How to clean data?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#step-4-present"&gt;Step 4: Present&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#step-5-distribute-the-insights"&gt;Step 5: Distribute the insights&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#three-panels-for-evaluating-action"&gt;Three Panels for Evaluating Action&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#examples-and-conclusions"&gt;Examples and Conclusions&lt;/a&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#composition-of-data"&gt;Composition of Data&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/#tools-recommendation"&gt;Tools Recommendation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;h2 id="solution-for-making-decision-based-on-large-set-of-data"&gt;Solution for Making Decision based on Large Set of Data&lt;/h2&gt;
&lt;h3 id="how-data-impacts-decision"&gt;How Data Impacts Decision&lt;/h3&gt;
&lt;h4 id="two-kinds-of-people-in-decision-making-process"&gt;Two Kinds of People in Decision Making Process&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Liability&lt;/code&gt;: people who know materials well, but not involved in decision making process&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Assets&lt;/code&gt;: people who can access materials and impact on decision making process&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="ignore-data-scraps-and-less-hunting"&gt;Ignore Data Scraps and Less Hunting&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Need clear actions: Less Time Hunting Data, More Time Getting Actions&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="the-decision-making-modal"&gt;The Decision Making Modal&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Stream Line&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="decision"&gt;Decision&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;A choice or determination made after considering a set of presented materials&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="supported-materials"&gt;Supported Materials&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Road Map&lt;/code&gt; before decision&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Guidance&lt;/code&gt; for decision&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="modals"&gt;Modals&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Informed-ness&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Timeless&lt;/code&gt;: decision-desired actions (time for taking action) =&amp;gt; Risk Impact Analysis&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Completeness&lt;/code&gt;: degree that I am confident in my decision&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Preparation of Direct Action&lt;/code&gt;: streaming triggered actions&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Optimality of Outcome&lt;/code&gt;: degree to which decision gets best result. This is the &lt;em&gt;environment&lt;/em&gt; for best decision&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="the-decision-making-process"&gt;The Decision Making Process&lt;/h3&gt;
&lt;h4 id="step-1-decision-driven-decision-making"&gt;Step 1: Decision-Driven Decision Making&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Always start from decision&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="what-do-we-want-to-achieve"&gt;What do we want to achieve?&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;del&gt;What DATA can I access?&lt;/del&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;Problem-Solve-Targeted&lt;/code&gt;: We want to have our data &lt;strong&gt;available to subscribers&lt;/strong&gt;. &lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="step-2-find-answers-to-questions"&gt;Step 2: Find answers to questions&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;Know questions &lt;code&gt;before see the data&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;i.e. &lt;em&gt;What will answer my questions?&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;Draw three panels: &lt;img alt="three panels" src="https://www.pengyin-shan.com/images/2017/data-science/three-panels.png"&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="step-3-clean-it-up"&gt;Step 3: Clean it up&lt;/h4&gt;
&lt;h5 id="process-in-place-before-cleaning"&gt;Process in place before cleaning&lt;/h5&gt;
&lt;blockquote&gt;
&lt;p&gt;Goal: Get to decision point&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Build Process&lt;/li&gt;
&lt;li&gt;Make data run under this process&lt;/li&gt;
&lt;li&gt;Example: Get Excel File =&amp;gt; Data Visualization =&amp;gt; Find Rules to Clean File =&amp;gt;Get Cleaned File&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id="how-to-clean-data"&gt;How to clean data?&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Capture&lt;/code&gt;: what &lt;strong&gt;bring&lt;/strong&gt; attention? =&amp;gt; Based on rules (&lt;em&gt;error&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Clarify&lt;/code&gt;: what it mean in &lt;strong&gt;context&lt;/strong&gt; (process) =&amp;gt; looking for &lt;strong&gt;data connector points/common points&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Organize&lt;/code&gt;: data with &lt;strong&gt;highest priority&lt;/strong&gt; first&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Reflect&lt;/code&gt;: &lt;strong&gt;review data&lt;/strong&gt; frequently =&amp;gt; &lt;em&gt;Ask client questions&lt;/em&gt;. Note context may change&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Engage&lt;/code&gt;: &lt;strong&gt;implementation&lt;/strong&gt; with data&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="step-4-present"&gt;Step 4: Present&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Target to the right stakeholder, right time, right way&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Remember different people use data differently, so when present data to clients, remember to use data that client only cares.&lt;/p&gt;
&lt;h4 id="step-5-distribute-the-insights"&gt;Step 5: Distribute the insights&lt;/h4&gt;
&lt;p&gt;Apply &lt;code&gt;insights&lt;/code&gt; to decision making process: Turn Data into Action&lt;/p&gt;
&lt;h5 id="three-panels-for-evaluating-action"&gt;Three Panels for Evaluating Action&lt;/h5&gt;
&lt;p&gt;&lt;img alt="three panels2" src="https://www.pengyin-shan.com/images/2017/data-science/three-panels2.png"&gt;&lt;/p&gt;
&lt;h4 id="examples-and-conclusions"&gt;Examples and Conclusions&lt;/h4&gt;
&lt;p&gt;data.geogria.gov&lt;/p&gt;
&lt;h5 id="composition-of-data"&gt;Composition of Data&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;Based on decision I want to make&lt;/li&gt;
&lt;li&gt;Bring historical data in&lt;/li&gt;
&lt;li&gt;Ask questions: what &lt;strong&gt;cause&lt;/strong&gt; the gap? What's the &lt;strong&gt;impact&lt;/strong&gt; of gap?&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="tools-recommendation"&gt;Tools Recommendation&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;CSV&lt;/code&gt;s&lt;/li&gt;
&lt;li&gt;&lt;code&gt;OpenRefine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQL&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DKAN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Data Integration List&lt;/code&gt;: share with client/standard for clean data. Example: null data? misspelling?&lt;/li&gt;
&lt;li&gt;Majority of time spending on &lt;strong&gt;clean data&lt;/strong&gt; =&amp;gt; &lt;em&gt;put this in SOW! show price in SOW!&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>Clean Data</category><category>Data Visualization</category><category>Meeting Notes</category><guid>https://www.pengyin-shan.com/posts/2017/data%20science/meeting-notes-for-from-dirty-to-decisive-using-clean-data-to-your-advantage/</guid><pubDate>Mon, 24 Apr 2017 04:00:00 GMT</pubDate></item><item><title>SparkSQL Basics</title><link>https://www.pengyin-shan.com/posts/2015/Data%20Science/sparksql-basics/</link><dc:creator>Pengyin(Wendy) Shan</dc:creator><description>&lt;div&gt;&lt;h3 id="resource-list"&gt;Resource List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.pengyin-shan.com/posts/2015/Data%20Science/sparksql-basics/www.sparkinchina.com"&gt;SparkSQL(Chinese)&lt;/a&gt;, written by Junhui Ma, www.sparkinchina.com (i.e. &lt;code&gt;SparkSQL book&lt;/code&gt; in my post)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="traditional-sql-and-rdbms"&gt;Traditional SQL and RDBMS&lt;/h3&gt;
&lt;p&gt;This is a graph of how traditional SQL query is processed, from SparkSQL book:&lt;/p&gt;
&lt;p&gt;../images/articles/2015/data_science/regular_query.png &lt;/p&gt;
&lt;p&gt;A traditional SQL query following this sequence: &lt;code&gt;Result&lt;/code&gt; -&amp;gt; &lt;code&gt;Data Source&lt;/code&gt; -&amp;gt; &lt;code&gt;Operation&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Step 1: a traditional RDBMS will first &lt;strong&gt;parse&lt;/strong&gt; the sql query to get tokens such as &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;where&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;Step 2: RDBMS will &lt;strong&gt;bind&lt;/strong&gt; sql query to data source in database system, such as &lt;code&gt;table&lt;/code&gt; or &lt;code&gt;view&lt;/code&gt;. If all corresponding data sources in database exists, this sql query is executable.&lt;/p&gt;
&lt;p&gt;Execute tree graph from SparkSQL book:&lt;/p&gt;
&lt;p&gt;../images/articles/2015/data_science/sql_execute_tree.png &lt;/p&gt;
&lt;p&gt;During step2, RDBMS will also supply a few execution plan. RDBMS will choose the one with the best optimization.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When RDBMS parse sql, it will transfer the sql to tree structure:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;../images/articles/2015/data_science/sql_tree.png &lt;/p&gt;
&lt;h2 id="sparksql"&gt;SparkSQL&lt;/h2&gt;
&lt;p&gt;SparkSQL(1.1) is combined by four modules:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;core&lt;/code&gt;: I/O operation. Get data resources(&lt;code&gt;RDD&lt;/code&gt;, &lt;code&gt;JSON&lt;/code&gt;, etc) then transfer it to &lt;code&gt;schemaRDD&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;catalyst&lt;/code&gt;: Process sql query. The process includes: parsing, binding, optimizing, creating logic plan, etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;hive&lt;/code&gt;: process hive data.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;hive-Thriftserver&lt;/code&gt;: provide &lt;code&gt;CLI&lt;/code&gt; and &lt;code&gt;JDBC/ODBC&lt;/code&gt; interface.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sparksql-tree-and-rule"&gt;SparkSQL: Tree and Rule&lt;/h3&gt;
&lt;p&gt;Similar as traditional RDBMS, SparkSQL also parse SQL query to a &lt;strong&gt;Tree&lt;/strong&gt; structure. The operation to tree is &lt;strong&gt;Rule&lt;/strong&gt;, which involves in using pattern matching to decide which operation show be taken for a certain tree node.&lt;/p&gt;
&lt;h4 id="tree"&gt;Tree&lt;/h4&gt;
&lt;p&gt;Tree can be used to show: &lt;code&gt;Logical Plans&lt;/code&gt;, &lt;code&gt;Expressions&lt;/code&gt; and &lt;code&gt;Physical Operators&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The operation to tree is working on &lt;strong&gt;TreeNode&lt;/strong&gt;. Just like normal tree data structure, SparkSQL can traverse whole tree or go to a certain tree node to perform operation.&lt;/p&gt;
&lt;h5 id="three-types-of-tree-node"&gt;Three Types of Tree Node&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UnaryNode&lt;/code&gt;: Only one child node. Using for operations like &lt;code&gt;Limit&lt;/code&gt;, &lt;code&gt;Filter&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;BinaryNode&lt;/code&gt;: Has left and right child node. Using for operations like &lt;code&gt;Join&lt;/code&gt;, &lt;code&gt;Union&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LeafNode&lt;/code&gt;: No child node. Using for user command, such as &lt;code&gt;SetCommand&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="rule"&gt;Rule&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Rule&lt;/code&gt; is a abstract class. It is extended by &lt;code&gt;RuleExecutor&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Rule can perform &lt;code&gt;transform&lt;/code&gt; operation by using &lt;code&gt;batch&lt;/code&gt;es.&lt;/p&gt;
&lt;p&gt;Rule can perform recursive operations by using &lt;code&gt;Once&lt;/code&gt; and &lt;code&gt;FixedPoint&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id="example-for-rule-analyzer"&gt;Example for Rule: Analyzer&lt;/h5&gt;
&lt;p&gt;Analyzer graph from SparkSQL book:&lt;/p&gt;
&lt;p&gt;../images/articles/2015/data_science/sparksql_analyzer.png &lt;/p&gt;
&lt;p&gt;Face in &lt;code&gt;RuleExcutor&lt;/code&gt; class for Analyzer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;There are multiple batches are used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each batch is combined by different rules. Some rules may be applied multiple times.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each rule has its own functions&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Tree and Rule are working together to perform: parse operation, binding operation, optimizing operation, create logical plan, etc. Finally a executable plan will be created.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="sparksql-sqlcontext"&gt;SparkSQL: sqlContext&lt;/h3&gt;
&lt;p&gt;Source Code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqlText&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="k"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;SchemaRDD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dialect&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;"sql"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nc"&gt;SchemaRDD&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;this&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parseSql&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqlText&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;//parse sql query&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;s"Unsupported SQL dialect: &lt;/span&gt;&lt;span class="si"&gt;$dialect&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;sqlContext.sql&lt;/code&gt; will return a &lt;code&gt;new SchemaRDD(this, parseSql(sqlText))&lt;/code&gt;, which has been parsed by &lt;code&gt;catalyst.SqlParser&lt;/code&gt;. Note &lt;code&gt;parseSql()&lt;/code&gt; will return a &lt;code&gt;Unresolved LogicalPlan&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;sqlContext Process Graph from SparkSQL book:&lt;/p&gt;
&lt;p&gt;../images/articles/2015/data_science/sqlcontext_process.png &lt;/p&gt;
&lt;h3 id="sparksql-catalyst"&gt;SparkSQL: catalyst&lt;/h3&gt;
&lt;p&gt;Design of SparkSQL(1.1) from SparkSQL Book (dash line means future feature):&lt;/p&gt;
&lt;p&gt;../images/articles/2015/data_science/catalyst_design.png &lt;/p&gt;
&lt;p&gt;Main modules for Catalyst:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sqlParse&lt;/code&gt;: Parser for SQL query.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, parse sql query to a tree, then apply rules to tree to perform transformation.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Analyzer&lt;/code&gt;: Bind &lt;code&gt;Unresolved LogicalPlan&lt;/code&gt; and meta-data from data resources. Generate &lt;code&gt;Resolved LogicalPlan&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;Analysis Rules&lt;/code&gt; and meta-data to generate &lt;code&gt;Resolved LogicalPlan&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Optimizer&lt;/code&gt;: Optimize &lt;code&gt;Resolved LogicalPlan&lt;/code&gt;. Generate &lt;code&gt;Optimized LogicalPlan&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;Optimization Rules&lt;/code&gt; to perform a group of optimizing operations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Planner&lt;/code&gt;: Transfer &lt;code&gt;Logical Plan&lt;/code&gt; to &lt;code&gt;Physical Plan&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;Planning Strategies&lt;/code&gt; to generate &lt;code&gt;Physical Plan&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CostModel&lt;/code&gt;: Choose best execution plan based on previous performance statistics.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>Big Data</category><category>Data Science</category><category>Spark</category><guid>https://www.pengyin-shan.com/posts/2015/Data%20Science/sparksql-basics/</guid><pubDate>Mon, 10 Aug 2015 04:00:00 GMT</pubDate></item><item><title>SQL Tips</title><link>https://www.pengyin-shan.com/posts/2015/Data%20Science/sql-tips/</link><dc:creator>Pengyin(Wendy) Shan</dc:creator><description>&lt;div&gt;&lt;h4 id="using-sqlprocessor-in-java"&gt;Using SQLProcessor in Java&lt;/h4&gt;
&lt;p&gt;My current job requires me to work on some old Java web application, which involves in connecting to Oracle SQL database using &lt;code&gt;SQLProcesoor&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id="basic-syntax"&gt;Basic Syntax&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;//Assume you want to return an ArrayList of 'Course' objects&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kd"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;SQLProcessorExample&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Course&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;selectSQLExample&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;final&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;anyParameter&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Course&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;courses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;Course&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;;&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;SQLProcessor&lt;/span&gt; &lt;span class="n"&gt;sProc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SQLProcessor&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
            &lt;span class="n"&gt;PreparedStatementGenerator&lt;/span&gt; &lt;span class="n"&gt;coursePSG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;PreparedStatementGenerator&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                    &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;PreparedStatement&lt;/span&gt; &lt;span class="nf"&gt;generatePrepareStatement&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Connection&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;SQLException&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;sql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;"select * from test_table where test_para = ?"&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                        &lt;span class="n"&gt;PreparedStatement&lt;/span&gt; &lt;span class="n"&gt;ps&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;prepareStatement&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sql&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                        &lt;span class="c1"&gt;//Note: Index starting from 1. You can also use setInt or other setting methods&lt;/span&gt;
                        &lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setString&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;anyParameter&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
                        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;ps&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
                    &lt;span class="o"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&amp;gt;();&lt;/span&gt;
            &lt;span class="c1"&gt;//Use MultiResultListReader if you have mutiple rows returned&lt;/span&gt;
            &lt;span class="n"&gt;MultiResultListReader&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MultiResultListReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;sProc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;query&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;coursePSG&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;database_connection&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="c1"&gt;//Deal with your results&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="o"&gt;[]&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;Course&lt;/span&gt; &lt;span class="n"&gt;result_c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Course&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
                &lt;span class="n"&gt;result_c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setCourseNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
                &lt;span class="n"&gt;result_c&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setSectionNumber&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]);&lt;/span&gt;
                &lt;span class="c1"&gt;//Process results...&lt;/span&gt;
                &lt;span class="n"&gt;courses&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result_c&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
            &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;catch&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Exception&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="o"&gt;){&lt;/span&gt;
            &lt;span class="c1"&gt;//Handle exceptions&lt;/span&gt;
        &lt;span class="o"&gt;}&lt;/span&gt;
    &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5 id="important-tips"&gt;Important Tips&lt;/h5&gt;
&lt;p&gt;If you have any trouble in your query and have no idea after checking with error message, try run this query in your &lt;strong&gt;DB workbench&lt;/strong&gt; first. This may help with possible syntax error.&lt;/p&gt;
&lt;p&gt;If you run query sucessfully in your DB workbench, but you get a &lt;code&gt;Invalid Indentifer&lt;/code&gt; or &lt;code&gt;Invalid Keyword&lt;/code&gt; exception in your Java app. &lt;strong&gt;Make sure you check your query in code with all necessary white spaces. You may have muliple lines of query code and you forget spaces at the end of one line.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;```java
String sql = "select * from table_test a, table_test2 b" +
            "where id = 1";
//Notice this sql doesn't have white_space between 'b' and 'where', which will cause trouble
&lt;/pre&gt;&lt;/div&gt;</description><category>Database</category><category>SQL</category><guid>https://www.pengyin-shan.com/posts/2015/Data%20Science/sql-tips/</guid><pubDate>Thu, 30 Jul 2015 04:00:00 GMT</pubDate></item><item><title>Search Engine Basics (Including Lucene)</title><link>https://www.pengyin-shan.com/posts/2015/Data%20Science/search-engine-basics-lucene/</link><dc:creator>Pengyin(Wendy) Shan</dc:creator><description>&lt;div&gt;&lt;h3 id="reference-list"&gt;Reference List&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_overview.htm"&gt;Lucene Tutorial from TutorialPoint.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="search-engine-basics"&gt;Search Engine Basics&lt;/h3&gt;
&lt;h4 id="search-application-operation-list"&gt;Search Application Operation List&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Acquire Raw Content&lt;/strong&gt;: Collect the target contents on which search are to be conducted.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build the document&lt;/strong&gt;:  Build the document(s) from the raw contents which search application can understands and interpret easily.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Analyze the document&lt;/strong&gt;: The document is to be analyzed as which part of the text is a candidate to be indexed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Indexing the document&lt;/strong&gt;: Index documents so that this document can be retrived based on certain keys instead of whole contents of the document.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;User Interface for Search&lt;/strong&gt;: To facilitate user to make a search, application must provide a user a mean or u0ser interface where a user can enter text and start the search process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build Query&lt;/strong&gt;: Once user made a request to search a text, application should prepare a Query object using that text which can be used to inquire index database to get the relevant details.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Search Query&lt;/strong&gt;: Using query object, index database is then checked to get the relevant details and the content documents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Render Results&lt;/strong&gt;: Once result is received the application should decide how to show the results to the user using User Interface. How much information is to be shown at first look and so on.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="lucene-basics"&gt;Lucene Basics&lt;/h3&gt;
&lt;h4 id="setup"&gt;Setup&lt;/h4&gt;
&lt;p&gt;Lucene performs step 2 to step 7 in &lt;code&gt;Search Application Operation List&lt;/code&gt; section above.&lt;/p&gt;
&lt;p&gt;You need &lt;code&gt;JDK&lt;/code&gt; for Lucene setup. You can view setup process &lt;a href="http://www.tutorialspoint.com/lucene/lucene_environment.htm"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id="index-process"&gt;Index Process&lt;/h4&gt;
&lt;p&gt;In Lucene, &lt;code&gt;IndexWriter&lt;/code&gt; is the most important and core component of the indexing process.&lt;/p&gt;
&lt;p&gt;Process Chart for TutorialsPoint:&lt;/p&gt;
&lt;p&gt;images/articles/2015/data/indexing_process.jpg &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We add Document(s) containing Field(s) to IndexWriter which analyzes the Document(s) using the Analyzer and then creates/open/edit indexes as required and store/update them in a Directory. IndexWriter is used to &lt;em&gt;update or create&lt;/em&gt; indexes. It is not used to read indexes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id="list-of-indexing-classes"&gt;List of Indexing Classes&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_indexwriter.htm"&gt;IndexWriter&lt;/a&gt;: This class acts as a core component which &lt;strong&gt;creates/updates indexes&lt;/strong&gt; during indexing process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_directory.htm"&gt;Directory&lt;/a&gt;: This class represents the &lt;strong&gt;storage&lt;/strong&gt; location of the indexes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_analyzer.htm"&gt;Analyzer&lt;/a&gt;: Analyzer class is responsible to &lt;strong&gt;analyze&lt;/strong&gt; a document and &lt;strong&gt;get the tokens/words from the text&lt;/strong&gt; which is to be indexed. Without analysis done, IndexWriter can not create index.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_document.htm"&gt;Document&lt;/a&gt;: Document represents a &lt;strong&gt;virtual document&lt;/strong&gt; with Fields where Field is object which can contain the physical document's contents, its meta data and so on. Analyzer can understand a Document only.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_field.htm"&gt;Field&lt;/a&gt;: Field is the &lt;strong&gt;lowest unit or the starting point&lt;/strong&gt; of the indexing process. It represents the &lt;code&gt;key-value&lt;/code&gt; pair relationship where a key is used to identify the value to be indexed. Say a field used to represent contents of a document will have key as "contents" and the value may contain the part or all of the text or numeric content of the document. Lucene can index only &lt;strong&gt;text or numeric&lt;/strong&gt; contents only.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id="list-of-search-classes"&gt;List of Search Classes&lt;/h5&gt;
&lt;p&gt;Searching process is again one of the core functionality provided by Lucene.&lt;/p&gt;
&lt;p&gt;It's flow is similar to that of indexing process. Basic search of lucene can be made using following classes which can also be termed as foundation classes for all search related operations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_indexsearcher.htm"&gt;IndexSearcher&lt;/a&gt;: This class act as a core component which &lt;strong&gt;reads/searches indexes&lt;/strong&gt; created after indexing process. It takes directory instance pointing to the location containing the indexes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_term.htm"&gt;Term&lt;/a&gt;: This class is the &lt;strong&gt;lowest&lt;/strong&gt; unit of searching. It is similar to Field in indexing process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_query.htm"&gt;Query&lt;/a&gt;: Query is an abstract class and contains various utility methods and is the parent of all types of queries that lucene uses during search process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_termquery.htm"&gt;TermQuery&lt;/a&gt;: TermQuery is the &lt;strong&gt;most commonly used query object&lt;/strong&gt; and is the foundation of many complex queries that lucene can make use of.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_topdocs.htm"&gt;TopDocs&lt;/a&gt; : TopDocs points to the top N search results which matches the search criteria. It is simple container of pointers to point to documents which are output of search result.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id="create-a-document"&gt;Create a Document&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create a method to &lt;strong&gt;get a lucene document&lt;/strong&gt; from a text file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create various types of fields which are &lt;code&gt;key-value&lt;/code&gt; pairs containing keys as &lt;strong&gt;names&lt;/strong&gt; and &lt;strong&gt;values&lt;/strong&gt; as contents to be indexed.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set field to be analyzed or not. In our case, only contents is to be analyzed as it can contain data such as &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;am&lt;/code&gt;, &lt;code&gt;are&lt;/code&gt;, &lt;code&gt;an&lt;/code&gt; etc. which are not required in search operations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example Code from TutorialsPoint:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt; &lt;span class="nf"&gt;getDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Document&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
    &lt;span class="c1"&gt;//index file contents&lt;/span&gt;
    &lt;span class="n"&gt;Field&lt;/span&gt; &lt;span class="n"&gt;contentField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LuceneConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CONTENTS&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FileReader&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="c1"&gt;//index file name&lt;/span&gt;
    &lt;span class="n"&gt;Field&lt;/span&gt; &lt;span class="n"&gt;fileNameField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LuceneConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FILE_NAME&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;YES&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NOT_ANALYZED&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="c1"&gt;//index file path&lt;/span&gt;
    &lt;span class="n"&gt;Field&lt;/span&gt; &lt;span class="n"&gt;filePathField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LuceneConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FILE_PATH&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCanonicalPath&lt;/span&gt;&lt;span class="o"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Store&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;YES&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;Index&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;NOT_ANALYZED&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;contentField&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fileNameField&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;add&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filePathField&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5 id="create-a-indexwriter"&gt;Create a IndexWriter&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;IndexWriter class acts as a core component which &lt;strong&gt;creates/updates&lt;/strong&gt; indexes during indexing process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create object of &lt;code&gt;IndexWriter&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;code&gt;lucene directory&lt;/code&gt; which should point to location where indexes are to be stored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialize the IndexWriter object created with the index directory, a standard analyzer having version information and other required/optional parameters.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example Code from TutorialsPoint:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="n"&gt;IndexWriter&lt;/span&gt; &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Indexer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;indexDirectoryPath&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;//this directory will contain the indexes&lt;/span&gt;
   &lt;span class="n"&gt;Directory&lt;/span&gt; &lt;span class="n"&gt;indexDirectory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FSDirectory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indexDirectoryPath&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
   &lt;span class="c1"&gt;//create the indexer&lt;/span&gt;
   &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IndexWriter&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indexDirectory&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StandardAnalyzer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LUCENE_36&lt;/span&gt;&lt;span class="o"&gt;),&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IndexWriter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MaxFieldLength&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;UNLIMITED&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5 id="start-indexing-process"&gt;Start Indexing Process&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;indexFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Indexing "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCanonicalPath&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="n"&gt;Document&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;addDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;document&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="basic-indexing-operations"&gt;Basic Indexing Operations&lt;/h4&gt;
&lt;h5 id="add-document-operation"&gt;Add Document Operation&lt;/h5&gt;
&lt;p&gt;Add document is one of the core operation as part of indexing process.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add a document to an index&lt;/strong&gt;: Refer to &lt;code&gt;Create a Document&lt;/code&gt; section above for process. After last step, add the newly created fields to the document object and return it to the caller method.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a IndexWriter&lt;/strong&gt;: Refer to &lt;code&gt;Create a IndexWriter&lt;/code&gt; section above for process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Add document and start Indexing process&lt;/strong&gt;: Two ways.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Way 1: &lt;strong&gt;addDocument(Document)&lt;/strong&gt; - Adds the document using the default analyzer (specified when index writer is created.)&lt;/p&gt;
&lt;p&gt;Way 2: &lt;strong&gt;addDocument(Document,Analyzer)&lt;/strong&gt; - Adds the document using the provided analyzer.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Refer "Start Indexing Process" section above for code reference.&lt;/p&gt;
&lt;h5 id="update-document-operation"&gt;Update Document Operation&lt;/h5&gt;
&lt;p&gt;Update document is another important operation as part of indexing process.&lt;/p&gt;
&lt;p&gt;This operation is used when already indexed contents are updated and indexes become invalid. This operation is also known as &lt;code&gt;re-indexing&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We update Document(s) containing Field(s) to &lt;code&gt;IndexWriter&lt;/code&gt; where &lt;code&gt;IndexWriter&lt;/code&gt; is used to update indexes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Update a document to an index&lt;/strong&gt;: Create a method to update a lucene document from an updated text file.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;updateDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;Document&lt;/span&gt; &lt;span class="n"&gt;document&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;/pre&gt;


&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;   //update indexes for file contents
   writer.updateDocument(new Term
      (LuceneConstants.CONTENTS,
      new FileReader(file)),document);
   writer.close();
}
&lt;/pre&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a IndexWriter&lt;/strong&gt;: Same as above.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Update document and start reindexing process&lt;/strong&gt;: Two Ways.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Way1: &lt;strong&gt;updateDocument(Term, Document)&lt;/strong&gt;: &lt;em&gt;Delete&lt;/em&gt; the document containing the term and &lt;em&gt;add&lt;/em&gt; the document using the default analyzer (specified when index writer is created.)&lt;/p&gt;
&lt;p&gt;Way2: &lt;strong&gt;updateDocument(Term, Document,Analyzer)&lt;/strong&gt;: &lt;em&gt;Delete&lt;/em&gt; the document containing the term and &lt;em&gt;add&lt;/em&gt; the document using the provided analyzer.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;indexFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Updating index for "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCanonicalPath&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="n"&gt;updateDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;/blockquote&gt;
&lt;h5 id="delete-document-operation"&gt;Delete Document Operation&lt;/h5&gt;
&lt;p&gt;Delete document is another important operation as part of indexing process.&lt;/p&gt;
&lt;p&gt;This operation is used when already indexed contents are updated and indexes become invalid or indexes become very large in size then &lt;em&gt;in order to reduce the size and update the index&lt;/em&gt;, delete operations are carried out.&lt;/p&gt;
&lt;p&gt;We delete Document(s) containing Field(s) to &lt;code&gt;IndexWriter&lt;/code&gt; where &lt;code&gt;IndexWriter&lt;/code&gt; is used to update indexes.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Delete a document from an index&lt;/strong&gt; : Create a method to delete a lucene document of an obsolete text file.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;deleteDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="c1"&gt;//delete indexes for a file&lt;/span&gt;
   &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;deleteDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Term&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LuceneConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FILE_NAME&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getName&lt;/span&gt;&lt;span class="o"&gt;()));&lt;/span&gt;
   &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"index contains deleted files: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;hasDeletions&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"index contains documents: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;maxDoc&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"index contains deleted documents: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;numDoc&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a IndexWriter&lt;/strong&gt;: Same as above&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Delete document and start reindexing process&lt;/strong&gt;: Five ways.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;Way1: &lt;strong&gt;deleteDocuments(Term)&lt;/strong&gt;: Delete all the documents containing the term.&lt;/p&gt;
&lt;p&gt;Way2: &lt;strong&gt;deleteDocuments(Term[])&lt;/strong&gt;: Delete all the documents containing any of the terms in the array.&lt;/p&gt;
&lt;p&gt;Way3: &lt;strong&gt;deleteDocuments(Query)&lt;/strong&gt;: Delete all the documents matching the query.&lt;/p&gt;
&lt;p&gt;Way4: &lt;strong&gt;deleteDocuments(Query[])&lt;/strong&gt;: Delete all the documents matching the query in the array.&lt;/p&gt;
&lt;p&gt;Way5: &lt;strong&gt;deleteAll&lt;/strong&gt;: Delete all the documents.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;indexFile&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;File&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Deleting index for "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getCanonicalPath&lt;/span&gt;&lt;span class="o"&gt;());&lt;/span&gt;
   &lt;span class="n"&gt;deleteDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5 id="field-options"&gt;Field Options&lt;/h5&gt;
&lt;p&gt;Field is the most important and the foundation unit of indexing process.&lt;/p&gt;
&lt;p&gt;It is the actual object containing the contents to be indexed. When we add a field, lucene provides numerous controls on the field using Field Options which states how much a field is to be searchable.&lt;/p&gt;
&lt;p&gt;We add Document(s) containing Field(s) to &lt;code&gt;IndexWriter&lt;/code&gt; where &lt;code&gt;IndexWriter&lt;/code&gt; is used to update or create indexes.&lt;/p&gt;
&lt;h6 id="list-of-field-options"&gt;List of Field Options&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Index.ANALYZED&lt;/code&gt;: First analyze then do indexing. Used for &lt;em&gt;normal text indexing&lt;/em&gt;. Analyzer will break the field's value into stream of tokens and each token is searcable sepearately.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Index.NOT_ANALYZED&lt;/code&gt;: Don't analyze but do indexing. Used for &lt;em&gt;complete text indexing&lt;/em&gt; *for example person's names, URL etc.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Index.ANALYZED_NO_NORMS&lt;/code&gt;: Varient of &lt;code&gt;Index.ANALYZED&lt;/code&gt;. Analyzer will &lt;em&gt;break the field's value into stream of tokens&lt;/em&gt; and each token is searcable sepearately but &lt;code&gt;NORMs&lt;/code&gt; are not stored in the indexes. &lt;code&gt;NORMS&lt;/code&gt; are used to boost searching but are sometime memory consuming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Index.Index.NOT_ANALYZED_NO_NORMS&lt;/code&gt;:  Varient of &lt;code&gt;Index.NOT_ANALYZED&lt;/code&gt;. Indexing is done but NORMS are not stored in the indexes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Index.NO&lt;/code&gt;: Field value is not searchable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="use-of-field-options"&gt;Use of Field Options&lt;/h6&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Same steps as &lt;code&gt;Create a Document&lt;/code&gt; section&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the newly created fields to the document object and return it to the caller method.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="search-operations"&gt;Search Operations&lt;/h4&gt;
&lt;p&gt;Searching process is one of the core functionality provided by Lucene.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IndexSearcher&lt;/code&gt; is the most important and core component of the searching process.&lt;/p&gt;
&lt;p&gt;Process Chart for TutorialsPoint:&lt;/p&gt;
&lt;p&gt;images/articles/2015/data/searching_process.jpg &lt;/p&gt;
&lt;p&gt;We first create &lt;code&gt;Directory&lt;/code&gt;(s) containing &lt;code&gt;index&lt;/code&gt;es and then pass it to &lt;code&gt;IndexSearcher&lt;/code&gt; which opens the &lt;code&gt;Directory&lt;/code&gt; using &lt;code&gt;IndexReader&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Then we create a &lt;code&gt;Query&lt;/code&gt; with a &lt;code&gt;Term&lt;/code&gt; and make a search using &lt;code&gt;IndexSearcher&lt;/code&gt; by passing the &lt;code&gt;Query&lt;/code&gt; to the searcher.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IndexSearcher&lt;/code&gt; returns a &lt;code&gt;TopDocs&lt;/code&gt; object which contains the search details along with document &lt;code&gt;ID&lt;/code&gt;(s) of the Document which is the result of the search operation.&lt;/p&gt;
&lt;h5 id="create-a-queryparser"&gt;Create a QueryParser&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;QueryParser class parses the user entered input into &lt;strong&gt;lucene understandable format query&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create object of &lt;code&gt;QueryParser&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialize the QueryParser object created with a standard analyzer having version information and index name on which this query is to run.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;QueryParser&lt;/span&gt; &lt;span class="n"&gt;queryParser&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Searcher&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;indexDirectoryPath&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;queryParser&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;QueryParser&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LUCENE_36&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
      &lt;span class="n"&gt;LuceneConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;CONTENTS&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;
         &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StandardAnalyzer&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Version&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;LUCENE_36&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;/blockquote&gt;
&lt;h5 id="create-a-indexsearch"&gt;Create a IndexSearch&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;IndexSearcher&lt;/code&gt; class acts as a core component which searcher indexes created during indexing process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create object of &lt;code&gt;IndexSearcher&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a &lt;strong&gt;lucene directory&lt;/strong&gt; which should point to location where indexes are to be stored.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Initialize the &lt;code&gt;IndexSearcher&lt;/code&gt; object created with the index directory&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;IndexSearcher&lt;/span&gt; &lt;span class="n"&gt;indexSearcher&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;Searcher&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;indexDirectoryPath&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;Directory&lt;/span&gt; &lt;span class="n"&gt;indexDirectory&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;
      &lt;span class="n"&gt;FSDirectory&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;open&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;File&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indexDirectoryPath&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
   &lt;span class="n"&gt;indexSearcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;IndexSearcher&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indexDirectory&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;/blockquote&gt;
&lt;h5 id="make-search"&gt;Make search&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To start search, create a &lt;code&gt;Query&lt;/code&gt; object by parsing search expression through QueryParser.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make search by calling `IndexSearcher.search()`` method.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;TopDocs&lt;/span&gt; &lt;span class="nf"&gt;search&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;searchQuery&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ParseException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;queryParser&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;parse&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;searchQuery&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;indexSearcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;search&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LuceneConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;MAX_SEARCH&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;/blockquote&gt;
&lt;h5 id="get-the-document"&gt;Get the document&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Document&lt;/span&gt; &lt;span class="nf"&gt;getDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScoreDoc&lt;/span&gt; &lt;span class="n"&gt;scoreDoc&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
   &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;CorruptIndexException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;indexSearcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scoreDoc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5 id="close-indexsearcher"&gt;Close IndexSearcher&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;close&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;indexSearcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="query-programming"&gt;Query Programming&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_termquery1.htm"&gt;TermQuery&lt;/a&gt;: TermQuery is the most commonly used query object and is the foundation of many complex queries that lucene can make use of. TermQuery is normally used to retrieve documents based on the key which is case sensitive.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_termrangequery.htm"&gt;TermRangeQuery&lt;/a&gt;: TermRangeQuery is the used when a range of textual terms are to be searched.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_prefixquery.htm"&gt;PrefixQuery&lt;/a&gt;: PrefixQuery is used to match documents whose &lt;em&gt;index starts with a specified string&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_booleanquery.htm"&gt;BooleanQuery&lt;/a&gt;: BooleanQuery is used to search documents which are result of multiple queries using &lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt; or &lt;code&gt;NOT&lt;/code&gt; operators.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_phrasequery.htm"&gt;PhraseQuery&lt;/a&gt;: Phrase query is used to search documents which contain a particular sequence of terms.&lt;/p&gt;
&lt;p&gt;WhildCardQuery: WildcardQuery is used to search documents using wildcards like &lt;code&gt;*&lt;/code&gt; for any character sequence,&lt;code&gt;?&lt;/code&gt; matching a single character.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_fuzzyquery.htm"&gt;FuzzyQuery&lt;/a&gt;: FuzzyQuery is used to search documents using &lt;strong&gt;fuzzy implementation&lt;/strong&gt; that is an approximate search based on edit distance algorithm.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_matchalldocsquery.htm"&gt;MatchAllDocsQuery&lt;/a&gt;: MatchAllDocsQuery as name suggests &lt;em&gt;matches all the documents&lt;/em&gt;.&lt;/p&gt;
&lt;h4 id="analysis-objects"&gt;Analysis Objects&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_token.htm"&gt;Token&lt;/a&gt;: Token represents text or word in a document with relevant details like its &lt;strong&gt;metadata&lt;/strong&gt; (position, start offset, end offset, token type and its position increment).&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_tokenstream.htm"&gt;TokenStream&lt;/a&gt;: TokenStream is an output of analysis process and it comprises of series of tokens. It is an abstract class.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_analyzer_class.htm"&gt;Analyzer&lt;/a&gt;: Analyzer class is responsible to analyze a document and get the tokens/words from the text which is to be indexed. Without analysis done, IndexWriter can not create index.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_whitespaceanalyzer.htm"&gt;WhitespaceAnalyzer&lt;/a&gt;: This analyzer spilts the text in a document based on &lt;strong&gt;whitespace&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_simpleanalyzer.htm"&gt;SimpleAnalyzer&lt;/a&gt;: This analyzer spilts the text in a document based on &lt;strong&gt;non-letter characters&lt;/strong&gt; and then lowercase them.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_stopanalyzer.htm"&gt;StopAnalyzer&lt;/a&gt;: This analyzer works similar to SimpleAnalyzer and remove the common words like &lt;code&gt;a&lt;/code&gt;,&lt;code&gt;an&lt;/code&gt;,&lt;code&gt;the&lt;/code&gt; etc.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/lucene/lucene_standardanalyzer.htm"&gt;StandardAnalyzer&lt;/a&gt;: This is the most sofisticated analyzer and is capable of handling &lt;code&gt;names&lt;/code&gt;, &lt;code&gt;email address&lt;/code&gt; etc. It lowercases each token and removes common words and punctuation if any.&lt;/p&gt;
&lt;h4 id="sorting"&gt;Sorting&lt;/h4&gt;
&lt;h5 id="sorting-by-relevance"&gt;Sorting By Relevance&lt;/h5&gt;
&lt;p&gt;This is &lt;strong&gt;default&lt;/strong&gt; sorting mode used by lucene.&lt;/p&gt;
&lt;p&gt;Lucene provides results by the most relevant hit at the top.&lt;/p&gt;
&lt;p&gt;Example Code from TutorialsPoint:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sortUsingRelevance&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;searchQuery&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ParseException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;searcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Searcher&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indexDir&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="c1"&gt;//create a term to search file name&lt;/span&gt;
   &lt;span class="n"&gt;Term&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Term&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LuceneConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FILE_NAME&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;searchQuery&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;//create the term query object&lt;/span&gt;
   &lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FuzzyQuery&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="n"&gt;searcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDefaultFieldSortScoring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;//do the search&lt;/span&gt;
   &lt;span class="n"&gt;TopDocs&lt;/span&gt; &lt;span class="n"&gt;hits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;searcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;search&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;RELEVANCE&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;endTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;totalHits&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
      &lt;span class="s"&gt;" documents found. Time :"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endTime&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"ms"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScoreDoc&lt;/span&gt; &lt;span class="n"&gt;scoreDoc&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;scoreDocs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;Document&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;searcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scoreDoc&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Score: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;scoreDoc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;score&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"File: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LuceneConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FILE_PATH&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="n"&gt;searcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;


&lt;h5 id="sorting-by-indexorder"&gt;Sorting By IndexOrder&lt;/h5&gt;
&lt;p&gt;This is sorting mode used by lucene in which first document indexed is shown first in the search results.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;private&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sortUsingIndex&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;searchQuery&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
 &lt;span class="kd"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;IOException&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ParseException&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
   &lt;span class="n"&gt;searcher&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Searcher&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;indexDir&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="c1"&gt;//create a term to search file name&lt;/span&gt;
   &lt;span class="n"&gt;Term&lt;/span&gt; &lt;span class="n"&gt;term&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Term&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LuceneConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FILE_NAME&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;searchQuery&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;//create the term query object&lt;/span&gt;
   &lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;query&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;FuzzyQuery&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;term&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="n"&gt;searcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;setDefaultFieldSortScoring&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;true&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="c1"&gt;//do the search&lt;/span&gt;
   &lt;span class="n"&gt;TopDocs&lt;/span&gt; &lt;span class="n"&gt;hits&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;searcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;search&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="n"&gt;Sort&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;INDEXORDER&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;endTime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
   &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;totalHits&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;
      &lt;span class="s"&gt;" documents found. Time :"&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;endTime&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;startTime&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;"ms"&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ScoreDoc&lt;/span&gt; &lt;span class="n"&gt;scoreDoc&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;hits&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;scoreDocs&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
      &lt;span class="n"&gt;Document&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;searcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;getDocument&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;scoreDoc&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;print&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Score: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;scoreDoc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;score&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s"&gt;" "&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
      &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;println&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"File: "&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;doc&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;get&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LuceneConstants&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;FILE_PATH&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
   &lt;span class="o"&gt;}&lt;/span&gt;
   &lt;span class="n"&gt;searcher&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;close&lt;/span&gt;&lt;span class="o"&gt;();&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>Data Science</category><category>Hydra</category><category>Search Engine</category><category>SEO</category><guid>https://www.pengyin-shan.com/posts/2015/Data%20Science/search-engine-basics-lucene/</guid><pubDate>Tue, 21 Jul 2015 04:00:00 GMT</pubDate></item><item><title>SQL Basics</title><link>https://www.pengyin-shan.com/posts/2015/Data%20Science/sql-basics/</link><dc:creator>Pengyin(Wendy) Shan</dc:creator><description>&lt;div&gt;&lt;h4 id="reference-list"&gt;Reference List&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://en.wikibooks.org/wiki/Oracle_Programming/SQL_Cheatsheet"&gt;Oracle Programming/SQL Cheatsheet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://www.tutorialspoint.com/sql/index.htm"&gt;SQL Tutorial on TutorialsPoint&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="basic-sql-commands"&gt;Basic SQL Commands&lt;/h4&gt;
&lt;h6 id="ddl-data-definition-language"&gt;DDL - Data Definition Language&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CREATE&lt;/code&gt;: Creates a new table, a view of a table, or other object in database&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ALTER&lt;/code&gt;: Modifies an existing database object, such as a table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DROP&lt;/code&gt;: Deletes an entire table, a view of a table or other object in the database.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="dml-data-manipulation-language"&gt;DML - Data Manipulation Language&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;INSERT&lt;/code&gt;: Creates a record&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UPDATE&lt;/code&gt;: Modifies records&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DELETE&lt;/code&gt;: Deletes records&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="dcl-data-control-language"&gt;DCL - Data Control Language&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;GRANT&lt;/code&gt;: Gives a privilege to user&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;REVOKE&lt;/code&gt;: Takes back privileges granted from user&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="dql-data-query-language"&gt;DQL - Data Query Language&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SELECT&lt;/code&gt;: Retrieves certain records from one or more tables&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="data-integrity"&gt;Data Integrity&lt;/h4&gt;
&lt;p&gt;The following categories of the data integrity exist with each RDBMS:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Entity Integrity&lt;/code&gt;: There are &lt;strong&gt;no duplicate rows&lt;/strong&gt; in a table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Domain Integrity&lt;/code&gt;: Enforces valid entries for a given column by &lt;strong&gt;restricting the type, the format, or the range of values&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Referential Integrity&lt;/code&gt;: Rows &lt;strong&gt;cannot be deleted&lt;/strong&gt;, which are &lt;strong&gt;used by other records&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;User-Defined Integrity&lt;/code&gt;: Enforces some specific business rules that do not fall into entity, domain or referential integrity.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="database-normalization"&gt;Database Normalization&lt;/h4&gt;
&lt;p&gt;Database normalization is the process of efficiently organizing data in a database.&lt;/p&gt;
&lt;p&gt;There are two reasons of the normalization process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Eliminating redundant data, for example, storing the same data in more than one tables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensuring data dependencies make sense.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Normalization guidelines are divided into normal forms; The aim of normal forms is to organize the database structure so that it complies with the rules of &lt;code&gt;first normal form&lt;/code&gt;, then &lt;code&gt;second normal form&lt;/code&gt;, and finally &lt;code&gt;third normal form&lt;/code&gt;.&lt;/p&gt;
&lt;h6 id="first-normal-form-1nf"&gt;First Normal Form (1NF)&lt;/h6&gt;
&lt;p&gt;First normal form (&lt;code&gt;1NF&lt;/code&gt;) sets the very basic rules for an organized database:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Define the data items required, because they become the columns in a table. Place related data items in a table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure that there are &lt;em&gt;no repeating groups of data&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensure that there is a &lt;em&gt;primary key&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="first-rule-of-1nf"&gt;First Rule of 1NF&lt;/h6&gt;
&lt;p&gt;You must define the data items.&lt;/p&gt;
&lt;p&gt;This means looking at the data to be stored, organizing the data into columns, defining what type of data each column contains, and finally putting related columns into their own table.&lt;/p&gt;
&lt;h6 id="second-rule-of-1nf"&gt;Second Rule of 1NF&lt;/h6&gt;
&lt;p&gt;Ensure that there are no repeating groups of data: you may need to &lt;code&gt;JOIN&lt;/code&gt; tables.&lt;/p&gt;
&lt;h6 id="third-rule-of-1nf"&gt;Third Rule of 1NF&lt;/h6&gt;
&lt;p&gt;Create primary key: &lt;code&gt;CREATE TABLE CUSTOMERS(PRIMARY KEY (ID));&lt;/code&gt;&lt;/p&gt;
&lt;h6 id="second-normal-form-2nf"&gt;Second Normal Form (2NF)&lt;/h6&gt;
&lt;p&gt;Second normal form states that it should meet all the rules for 1NF and there must be no partial dependences of any of the columns on the primary key.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;Consider a customer-order relation and you want to store customer ID, customer name, order ID and order detail, and date of purchase:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;CUSTOMERS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;CUST_ID&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;CUST_NAME&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ORDER_ID&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;ORDER_DETAIL&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;SALE_DATE&lt;/span&gt; &lt;span class="n"&gt;DATETIME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CUST_ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ORDER_ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This table is in first normal form, in that it obeys all the rules of first normal form.&lt;/p&gt;
&lt;p&gt;In this table, the primary key consists of &lt;code&gt;CUST_ID&lt;/code&gt; and &lt;code&gt;ORDER_ID&lt;/code&gt;. Combined, they are unique assuming same customer would hardly order same thing.&lt;/p&gt;
&lt;p&gt;However, the table is not in second normal form because there are partial dependencies of primary keys and columns:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CUST_NAME&lt;/code&gt; is dependent on &lt;code&gt;CUST_ID&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Order detail and purchase date are dependent on &lt;code&gt;ORDER_ID&lt;/code&gt;, but they are not dependent on &lt;code&gt;CUST_ID&lt;/code&gt;, because there's no link between a CUST_ID and an ORDER_DETAIL or their SALE_DATE.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;No real link between a customer's name and what he purchased.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;To make this table comply with second normal form, you need to separate the columns into three tables.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id="third-normal-form-3nf"&gt;Third Normal Form (3NF)&lt;/h6&gt;
&lt;p&gt;A table is in third normal form when the following conditions are met:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It is in second normal form.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All nonprimary fields are dependent on the primary key.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The dependency of nonprimary fields is between the data.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;CUSTOMERS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;CUST_ID&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;CUST_NAME&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;DOB&lt;/span&gt; &lt;span class="nb"&gt;DATE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;STREET&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;CITY&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;STATE&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;ZIP&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="n"&gt;EMAIL_ID&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;256&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CUST_ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The dependency between &lt;code&gt;zip code&lt;/code&gt; and &lt;code&gt;address&lt;/code&gt; is called a &lt;strong&gt;transitive dependency&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To comply with third normal form, all you need to do is move the Street, City, and State fields into their own table.&lt;/p&gt;
&lt;p&gt;The advantages of removing transitive dependencies:
- The amount of data duplication is reduced and therefore your database becomes smaller.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data integrity.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;When duplicated data changes, there's a big risk of updating only some of the data, especially if it's spread out in a number of different places in the database.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id="select"&gt;SELECT&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;SELECT INTO&lt;/code&gt; can only retrieve &lt;strong&gt;one&lt;/strong&gt; line of item. Empty line will get &lt;em&gt;NO_DATA_FOUND&lt;/em&gt; error. Mutiple lines will get &lt;em&gt;TOO_MANY_ROWS&lt;/em&gt; error.&lt;/p&gt;
&lt;h4 id="like"&gt;LIKE&lt;/h4&gt;
&lt;p&gt;User &lt;code&gt;LIKE&lt;/code&gt; to compare a value to similar values using wildcard operators.&lt;/p&gt;
&lt;p&gt;There are two wildcards used in conjunction with the LIKE operator:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The percent sign &lt;code&gt;%&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The underscore &lt;code&gt;_&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WHERE SALARY LIKE '2_%_%'&lt;/code&gt;: Finds any values that start with 2 and are at least 3 characters in length&lt;/p&gt;
&lt;h4 id="top"&gt;TOP&lt;/h4&gt;
&lt;p&gt;The SQL &lt;code&gt;TOP&lt;/code&gt; clause is used to fetch a TOP N number or X percent records from a table.&lt;/p&gt;
&lt;p&gt;Note: All the databases do not support TOP clause. For example MySQL supports &lt;code&gt;LIMIT&lt;/code&gt; clause to fetch limited number of records and Oracle uses &lt;code&gt;ROWNUM&lt;/code&gt; to fetch limited number of records.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TOP&lt;/span&gt; &lt;span class="nb"&gt;number&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;percent&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;MySQL:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt;
&lt;span class="k"&gt;LIMIT&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Oracle Server:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;columns&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ROWNUM&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="order-by"&gt;ORDER BY&lt;/h4&gt;
&lt;p&gt;The SQL &lt;code&gt;ORDER BY&lt;/code&gt; clause is used to sort the data in ascending or descending order, based on one or more columns.&lt;/p&gt;
&lt;p&gt;Some database sorts query results in ascending order by default.&lt;/p&gt;
&lt;p&gt;You can use more than one column in the &lt;code&gt;ORDER BY&lt;/code&gt; clause. Make sure whatever column you are using to sort, that column should be in column-list.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;column&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="n"&gt;columnN&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;ASC&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="group-by"&gt;GROUP BY&lt;/h4&gt;
&lt;p&gt;The SQL &lt;code&gt;GROUP BY&lt;/code&gt; clause is used in collaboration with the &lt;code&gt;SELECT&lt;/code&gt; statement to arrange identical data into groups.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;GROUP BY&lt;/code&gt; clause follows the &lt;code&gt;WHERE&lt;/code&gt; clause in a &lt;code&gt;SELECT&lt;/code&gt; statement and must precedes the &lt;code&gt;ORDER BY&lt;/code&gt; clause.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;conditions&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="distinct"&gt;DISTINCT&lt;/h4&gt;
&lt;p&gt;The SQL &lt;code&gt;DISTINCT&lt;/code&gt; keyword is used in conjunction with &lt;code&gt;SELECT&lt;/code&gt; statement to eliminate all the duplicate records and fetching only unique records.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt;&lt;span class="p"&gt;,.....&lt;/span&gt;&lt;span class="n"&gt;columnN&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="sql-constraints"&gt;SQL Constraints&lt;/h4&gt;
&lt;p&gt;Constraints could be column level or table level.&lt;/p&gt;
&lt;p&gt;Commonly used constraints:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;NOT NULL&lt;/code&gt; Constraint: Ensures that a column cannot have &lt;code&gt;NULL&lt;/code&gt; value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;DEFAULT&lt;/code&gt; Constraint: Provides a default value for a column when none is specified.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;UNIQUE&lt;/code&gt; Constraint: Ensures that all values in a column are different.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;PRIMARY&lt;/code&gt; Key: Uniquely identified each rows/records in a database table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FOREIGN&lt;/code&gt; Key: Uniquely identified a rows/records in any another database table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CHECK&lt;/code&gt; Constraint: The &lt;code&gt;CHECK&lt;/code&gt; constraint ensures that all values in a column &lt;em&gt;satisfy certain conditions&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;INDEX&lt;/code&gt;: Use to create and retrieve data from the database very quickly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="not-null"&gt;NOT NULL&lt;/h6&gt;
&lt;p&gt;A NULL is not the same as no data, rather, it represents unknown data.&lt;/p&gt;
&lt;p&gt;Example: &lt;code&gt;CREATE TABLE CUSTOMERS( ID  INT  NOT NULL);&lt;/code&gt;&lt;/p&gt;
&lt;h6 id="default"&gt;DEFAULT&lt;/h6&gt;
&lt;p&gt;In case &lt;code&gt;INSERT INTO&lt;/code&gt; or &lt;code&gt;INSERT&lt;/code&gt; statement does not provide a value for such column, then the column will have a default value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CREATE TABLE CUSTOMERS(ID  INT  NOT NULL)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ALTER COLUMN SALARY DROP DEFAULT;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="primary-key"&gt;PRIMARY KEY&lt;/h6&gt;
&lt;p&gt;A primary key is a field in a table which uniquely identifies each row/record in a database table.&lt;/p&gt;
&lt;p&gt;Primary keys must contain unique values. A primary key column cannot have &lt;code&gt;NULL&lt;/code&gt; values.&lt;/p&gt;
&lt;p&gt;A table can have only one primary key. When multiple fields are used as a primary key, they are called a &lt;code&gt;composite key&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;NOTE: If you use the &lt;code&gt;ALTER TABLE&lt;/code&gt; statement to add a primary key, the primary key column(s) must already have been declared to not contain &lt;code&gt;NULL&lt;/code&gt; values (when the table was first created).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example: &lt;code&gt;CREATE TABLE CUSTOMERS( PRIMARY KEY (ID, NAME) );&lt;/code&gt;&lt;/p&gt;
&lt;h6 id="foreign-key"&gt;FOREIGN KEY&lt;/h6&gt;
&lt;p&gt;A &lt;code&gt;foreign key&lt;/code&gt; is a key used to link two tables together. This is sometimes called a &lt;code&gt;referencing key&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Foreign Key is a column or a combination of columns whose values match a Primary Key in a different table.&lt;/p&gt;
&lt;p&gt;The relationship between 2 tables matches the Primary Key in one of the tables with a Foreign Key in the second table.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CREATE TABLE ORDERS (  CUSTOMER_ID INT references CUSTOMERS(ID) );&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;ORDERS&lt;/span&gt;
&lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;If ORDERS table has already been created, and the foreign key has not yet been set, use the syntax for specifying a foreign key by altering a table:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;ORDERS&lt;/span&gt;
&lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;FOREIGN&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Customer_ID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;REFERENCES&lt;/span&gt; &lt;span class="n"&gt;CUSTOMERS&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="check"&gt;CHECK&lt;/h6&gt;
&lt;p&gt;The &lt;code&gt;CHECK&lt;/code&gt; Constraint enables a condition to check the value being entered into a record. If the condition evaluates to false, the record violates the constraint and isn't entered into the table.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CREATE TABLE CUSTOMERS(AGE INT NOT NULL CHECK (AGE &amp;gt;= 18));&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;CUSTOMERS&lt;/span&gt;
    &lt;span class="k"&gt;MODIFY&lt;/span&gt; &lt;span class="n"&gt;AGE&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;CHECK&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AGE&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;CUSTOMERS&lt;/span&gt;
    &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;CONSTRAINT&lt;/span&gt; &lt;span class="n"&gt;myCheckConstraint&lt;/span&gt; &lt;span class="k"&gt;CHECK&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AGE&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;CUSTOMERS&lt;/span&gt;
    &lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;CONSTRAINT&lt;/span&gt; &lt;span class="n"&gt;myCheckConstraint&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="index"&gt;INDEX&lt;/h6&gt;
&lt;p&gt;The &lt;code&gt;INDEX&lt;/code&gt; is used to create and retrieve data from the database very quickly.&lt;/p&gt;
&lt;p&gt;Index can be created by using single or group of columns in a table.&lt;/p&gt;
&lt;p&gt;When index is created, it is assigned a &lt;code&gt;ROWID&lt;/code&gt; for each row before it sorts out the data.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;index_name&lt;/span&gt;
    &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt;&lt;span class="p"&gt;.....);&lt;/span&gt;
&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;CUSTOMERS&lt;/span&gt;
    &lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;idx_age&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="join"&gt;JOIN&lt;/h4&gt;
&lt;p&gt;JOIN is performed in the WHERE clause. Several operators can be used to join tables, such as =, &amp;lt;, &amp;gt;, &amp;lt;&amp;gt;, &amp;lt;=, &amp;gt;=, !=, BETWEEN, LIKE, and NOT;&lt;/p&gt;
&lt;p&gt;There are different types of joins available in SQL:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;INNER JOIN&lt;/code&gt;: returns rows when there is a match in &lt;strong&gt;both tables&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LEFT JOIN&lt;/code&gt;: returns all rows from the &lt;strong&gt;left table&lt;/strong&gt;, even if there are no matches in the right table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;RIGHT JOIN&lt;/code&gt;: returns all rows from the &lt;strong&gt;right table&lt;/strong&gt;, even if there are no matches in the left table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;FULL JOIN&lt;/code&gt;: returns rows when there is a match &lt;strong&gt;in one of the tables&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SELF JOIN&lt;/code&gt;: is used to &lt;strong&gt;join a table to itself&lt;/strong&gt; as if the table were two tables, temporarily renaming at least one table in the SQL statement.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;CARTESIAN JOIN&lt;/code&gt;: returns the &lt;strong&gt;Cartesian product&lt;/strong&gt; of the sets of records from the two or more joined tables.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="inner-join"&gt;INNER JOIN&lt;/h6&gt;
&lt;p&gt;When the join-predicate is satisfied, column values for each matched pair of rows of A and B are combined into a result row.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt;  &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AMOUNT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;DATE&lt;/span&gt;
 &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;CUSTOMERS&lt;/span&gt;
 &lt;span class="k"&gt;INNER&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;ORDERS&lt;/span&gt;
 &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;CUSTOMERS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ORDERS&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CUSTOMER_ID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="left-join"&gt;LEFT JOIN&lt;/h6&gt;
&lt;p&gt;The SQL LEFT JOIN returns all rows from the left table, even if there are no matches in the right table.&lt;/p&gt;
&lt;p&gt;This means that if the ON clause matches 0 (zero) records in right table, the join will still return a row in the result, but with &lt;code&gt;NULL&lt;/code&gt; in each column &lt;strong&gt;from right table&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This means that a left join returns all the values from the left table, plus matched values from the right table or NULL in case of no matching join predicate.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column2&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt;
&lt;span class="k"&gt;LEFT&lt;/span&gt; &lt;span class="k"&gt;JOIN&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt;
&lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common_field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common_field&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;RIGHT JOIN is similar.&lt;/p&gt;
&lt;h6 id="full-join"&gt;FULL JOIN&lt;/h6&gt;
&lt;p&gt;The SQL FULL JOIN combines &lt;strong&gt;the results of both left and right outer joins&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The joined table will contain all records from both tables, and fill in NULLs for missing matches on either side.&lt;/p&gt;
&lt;h6 id="self-join"&gt;SELF JOIN&lt;/h6&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common_field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;common_field&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="cartesian-joincross-join"&gt;CARTESIAN JOIN/CROSS JOIN&lt;/h6&gt;
&lt;p&gt;The &lt;code&gt;CARTESIAN JOIN&lt;/code&gt; or &lt;code&gt;CROSS JOIN&lt;/code&gt; returns the Cartesian product of the sets of records from the two or more joined tables.&lt;/p&gt;
&lt;p&gt;Thus, it equates to &lt;em&gt;an inner join where the join-condition always evaluates to True&lt;/em&gt; or &lt;em&gt;where the join-condition is absent&lt;/em&gt; from the statement.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;column2&lt;/span&gt;&lt;span class="p"&gt;...&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;  &lt;span class="n"&gt;table1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;table3&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="union"&gt;UNION&lt;/h4&gt;
&lt;p&gt;The SQL &lt;code&gt;UNION&lt;/code&gt; clause/operator is used to combine the results of two or more SELECT statements &lt;strong&gt;without returning any duplicate rows&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To use UNION, each SELECT must have &lt;em&gt;the same number of columns selected, the same number of column expressions, the same data type, and have them in the same order&lt;/em&gt;, but they do not have to be the same length.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;UNION&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The &lt;code&gt;UNION ALL&lt;/code&gt; operator is used to combine the results of two SELECT statements &lt;strong&gt;including duplicate rows&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;There are two other clauses (i.e., operators), which are very similar to UNION clause:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SQL &lt;code&gt;INTERSECT&lt;/code&gt; Clause&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL &lt;code&gt;EXCEPT&lt;/code&gt; Clause&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="intersect"&gt;INTERSECT&lt;/h6&gt;
&lt;p&gt;The SQL &lt;code&gt;INTERSECT&lt;/code&gt; clause/operator is used to combine two SELECT statements, but returns rows only from the first SELECT statement that are identical to a row in the second SELECT statement.&lt;/p&gt;
&lt;p&gt;This means INTERSECT returns &lt;em&gt;only common rows returned by the two SELECT statements&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;INTERSECT&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="except"&gt;EXCEPT&lt;/h6&gt;
&lt;p&gt;The SQL &lt;code&gt;EXCEPT&lt;/code&gt; clause/operator is used to combine two SELECT statements and returns rows from the first SELECT statement that are not returned by the second SELECT statement.&lt;/p&gt;
&lt;p&gt;This means EXCEPT returns only rows, which &lt;em&gt;are not available in second SELECT statement&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Syntax is similar to &lt;code&gt;INTERSECT&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id="null-values"&gt;NULL VALUES&lt;/h4&gt;
&lt;p&gt;SQL NULL is the term used to represent &lt;strong&gt;no&lt;/strong&gt; value.&lt;/p&gt;
&lt;p&gt;It is very important to understand that a NULL value is different than a zero value or a field that contains spaces.&lt;/p&gt;
&lt;p&gt;You must use the &lt;code&gt;IS NULL&lt;/code&gt; or &lt;code&gt;IS NOT NULL&lt;/code&gt; operators in order to check for a NULL value.&lt;/p&gt;
&lt;h4 id="sql-alias"&gt;SQL Alias&lt;/h4&gt;
&lt;p&gt;User can rename a table or a column &lt;strong&gt;temporarily&lt;/strong&gt; by giving another name known as &lt;code&gt;alias&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt;&lt;span class="p"&gt;....&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;alias_name&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="p"&gt;:::&lt;/span&gt;&lt;span class="k"&gt;sql&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;alias_name&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AGE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;AMOUNT&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;CUSTOMERS&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ORDERS&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;C&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CUSTOMER_ID&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="sql-index"&gt;SQL INDEX&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Index&lt;/code&gt; is special lookup table that the database search engine can use to speed up data retrieval. i.e. an index is a &lt;strong&gt;pointer to data&lt;/strong&gt; in a table.&lt;/p&gt;
&lt;p&gt;An index helps &lt;strong&gt;speed up&lt;/strong&gt; &lt;code&gt;SELECT&lt;/code&gt; queries and &lt;code&gt;WHERE&lt;/code&gt; clauses, but it &lt;strong&gt;slows down&lt;/strong&gt; data input, with &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;INSERT&lt;/code&gt; statements. Indexes can be created or dropped with no effect on the data.&lt;/p&gt;
&lt;h6 id="create"&gt;CREATE&lt;/h6&gt;
&lt;p&gt;Creating index involves the &lt;code&gt;CREATE INDEX&lt;/code&gt; statement, which allows you to name the index, to specify the table and which column or columns to index, and to indicate whether the index is in ascending or descending
order.&lt;/p&gt;
&lt;p&gt;Indexes can also be &lt;strong&gt;unique&lt;/strong&gt;, similar to the UNIQUE constraint, in that the index prevents duplicate entries in the column or combination of columns on which there's an index.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;index_name&lt;/span&gt; &lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Single-Column Indexes:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;index_name&lt;/span&gt;
&lt;span class="k"&gt;ON&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="unique-indexes"&gt;Unique Indexes&lt;/h6&gt;
&lt;p&gt;A unique index does not allow any duplicate values to be inserted into the table.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;UNIQUE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;index_name&lt;/span&gt; &lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;column_name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="composite-indexes"&gt;Composite Indexes&lt;/h6&gt;
&lt;p&gt;Should there be only one column used, a single-column index should be the choice.&lt;/p&gt;
&lt;p&gt;Should there be two or more columns that are frequently used in the WHERE clause as filters, the composite index would be the best choice.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;index_name&lt;/span&gt;
&lt;span class="k"&gt;on&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="implicit-indexed"&gt;Implicit Indexed&lt;/h6&gt;
&lt;p&gt;Implicit indexes are indexes that are automatically created by the database server when an object is created.&lt;/p&gt;
&lt;p&gt;Indexes are automatically created for &lt;strong&gt;primary key constraints and unique constraints&lt;/strong&gt;.&lt;/p&gt;
&lt;h6 id="drop"&gt;DROP&lt;/h6&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;INDEX&lt;/span&gt; &lt;span class="n"&gt;index_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="when-to-avoid-index"&gt;WHEN TO AVOID INDEX&lt;/h6&gt;
&lt;p&gt;The following guidelines indicate when the use of an index should be reconsidered:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Indexes should not be used on &lt;strong&gt;small tables&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tables that have frequent, large &lt;strong&gt;batch update&lt;/strong&gt; or &lt;strong&gt;insert&lt;/strong&gt; operations.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Indexes should not be used on columns that contain a high number of NULL values.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Columns that are &lt;strong&gt;frequently manipulated&lt;/strong&gt; should not be indexed.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="alter-table"&gt;ALTER TABLE&lt;/h4&gt;
&lt;p&gt;SQL &lt;code&gt;ALTER TABLE&lt;/code&gt; command is used to add, delete or modify columns in an existing table.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt;
&lt;span class="k"&gt;DO&lt;/span&gt; &lt;span class="n"&gt;SOMETHING&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="trunacte-table"&gt;TRUNACTE TABLE&lt;/h4&gt;
&lt;p&gt;SQL &lt;code&gt;TRUNCATE TABLE&lt;/code&gt; command is used to &lt;strong&gt;delete complete data&lt;/strong&gt; from an existing table.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;TRUNCATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="views"&gt;VIEWS&lt;/h4&gt;
&lt;p&gt;View is nothing more than a SQL statement that is stored in the database with an associated name.&lt;/p&gt;
&lt;p&gt;A view is actually a composition of a table in the form of a predefined SQL query.&lt;/p&gt;
&lt;p&gt;A view can contain all rows of a table or select rows from a table.&lt;/p&gt;
&lt;p&gt;A view can be created from one or many tables which depends on the written SQL query to create a view.&lt;/p&gt;
&lt;h6 id="creating-view"&gt;CREATING VIEW&lt;/h6&gt;
&lt;p&gt;Database views are created using the &lt;code&gt;CREATE VIEW&lt;/code&gt; statement.&lt;/p&gt;
&lt;p&gt;Views can be created from a single table, multiple tables, or another view.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;view_name&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt;&lt;span class="p"&gt;.....&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="p"&gt;:::&lt;/span&gt;&lt;span class="k"&gt;sql&lt;/span&gt;
&lt;span class="k"&gt;SQL&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;CUSTOMERS_VIEW&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="with-check-option"&gt;WITH CHECK OPTION&lt;/h6&gt;
&lt;p&gt;The &lt;code&gt;WITH CHECK OPTION&lt;/code&gt; is a &lt;code&gt;CREATE VIEW&lt;/code&gt; statement option.&lt;/p&gt;
&lt;p&gt;The purpose of the WITH CHECK OPTION is to ensure that &lt;strong&gt;all UPDATE and INSERTs satisfy the condition(s) in the view definition&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If they do not satisfy the condition(s), the UPDATE or INSERT returns an error.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;CUSTOMERS_VIEW&lt;/span&gt; &lt;span class="k"&gt;AS&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;CUSTOMERS&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="k"&gt;IS&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
&lt;span class="k"&gt;WITH&lt;/span&gt; &lt;span class="k"&gt;CHECK&lt;/span&gt; &lt;span class="k"&gt;OPTION&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The WITH CHECK OPTION in this case should deny the entry of any NULL values in the view's AGE column.&lt;/p&gt;
&lt;h6 id="update-view"&gt;UPDATE VIEW&lt;/h6&gt;
&lt;p&gt;A VIEW can be updated in certain conditions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The SELECT clause may not contain the keyword DISTINCT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The SELECT clause may not contain summary functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The SELECT clause may not contain set functions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The SELECT clause may not contain set operators.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The SELECT clause may not contain an ORDER BY clause.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The FROM clause may not contain multiple tables.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The WHERE clause may not contain subqueries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The query may not contain GROUP BY or HAVING.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Calculated columns may not be updated.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;All NOT NULL columns from the base table must be included in the view in order for the INSERT query to function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="n"&gt;CUSTOMERS_VIEW&lt;/span&gt;
&lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;AGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;35&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'Ramesh'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This would ultimately update the base table CUSTOMERS &lt;strong&gt;and&lt;/strong&gt; same would reflect in the view itself.&lt;/p&gt;
&lt;h6 id="insert-or-delete-rows"&gt;INSERT OR DELETE ROWS&lt;/h6&gt;
&lt;p&gt;Rows of data can be inserted/deleted from a view.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SQL&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;DELETE&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;CUSTOMERS_VIEW&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;age&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This would ultimately delete a row from the base table CUSTOMERS &lt;strong&gt;and&lt;/strong&gt; same would reflect in the view itself.&lt;/p&gt;
&lt;h6 id="drop-view"&gt;DROP VIEW&lt;/h6&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="k"&gt;VIEW&lt;/span&gt; &lt;span class="n"&gt;view_name&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="having-clause"&gt;HAVING CLAUSE&lt;/h4&gt;
&lt;p&gt;HAVING clause enables you to specify conditions that filter which group results appear in the final results.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;HAVING&lt;/code&gt; clause places conditions on groups created by the &lt;code&gt;GROUP BY&lt;/code&gt; clause.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt;
&lt;span class="k"&gt;HAVING&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;The &lt;code&gt;HAVING&lt;/code&gt; clause must follow the &lt;code&gt;GROUP BY&lt;/code&gt; clause in a query and must also precede the &lt;code&gt;ORDER BY&lt;/code&gt; clause if used.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;conditions&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;GROUP&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt;
&lt;span class="k"&gt;HAVING&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;conditions&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;ORDER&lt;/span&gt; &lt;span class="k"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="tansactions"&gt;TANSACTIONS&lt;/h4&gt;
&lt;p&gt;Transaction is a unit of work that is performed &lt;strong&gt;against a database&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Transactions are &lt;strong&gt;units&lt;/strong&gt; or &lt;strong&gt;sequences&lt;/strong&gt; of work accomplished in a logical order, whether in a manual fashion by a user or automatically by some sort of a database program.&lt;/p&gt;
&lt;p&gt;A transaction is the propagation of one or more changes to the database.&lt;/p&gt;
&lt;p&gt;Practically, you will club many SQL queries into a group and you will execute all of them together as a part of a transaction.&lt;/p&gt;
&lt;h6 id="properties-of-transactions"&gt;PROPERTIES OF TRANSACTIONS&lt;/h6&gt;
&lt;p&gt;Transactions have the following four standard properties, usually referred to by the acronym &lt;code&gt;ACID&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Atomicity&lt;/code&gt;: ensures that all operations within the work unit are completed successfully; otherwise, the transaction is aborted at the point of failure, and previous operations are rolled back to their former state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Consistency&lt;/code&gt;: ensures that the database properly changes states upon a successfully committed transaction.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Isolation&lt;/code&gt;: enables transactions to operate independently of and transparent to each other.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Durability&lt;/code&gt;: ensures that the result or effect of a committed transaction persists in case of a system failure.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="transaction-control"&gt;TRANSACTION CONTROL&lt;/h6&gt;
&lt;p&gt;There are following commands used to control transactions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;COMMIT&lt;/code&gt;: to save the changes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ROLLBACK&lt;/code&gt;: to rollback the changes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SAVEPOINT&lt;/code&gt;: creates points within groups of transactions in which to ROLLBACK&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;SET TRANSACTION&lt;/code&gt;: Places a name on a transaction.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Transactional control commands are only used with the DML commands &lt;code&gt;INSERT&lt;/code&gt;, &lt;code&gt;UPDATE&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; only.&lt;/p&gt;
&lt;p&gt;They can not be used while creating tables or dropping them because these operations are automatically committed in the database.&lt;/p&gt;
&lt;h6 id="commit"&gt;COMMIT&lt;/h6&gt;
&lt;p&gt;The COMMIT command is the transactional command used to &lt;strong&gt;save changes&lt;/strong&gt; invoked by a transaction to the database.&lt;/p&gt;
&lt;p&gt;The COMMIT command saves all transactions to the database since the last &lt;code&gt;COMMIT&lt;/code&gt; or &lt;code&gt;ROLLBACK&lt;/code&gt; command.&lt;/p&gt;
&lt;p&gt;The syntax for COMMIT command is as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;COMMIT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="rollback"&gt;ROLLBACK&lt;/h6&gt;
&lt;p&gt;The ROLLBACK command is the transactional command used to &lt;strong&gt;undo transactions&lt;/strong&gt; that &lt;strong&gt;have not already been saved&lt;/strong&gt; to the database.&lt;/p&gt;
&lt;p&gt;The ROLLBACK command can only be used to undo transactions since the last &lt;code&gt;COMMIT&lt;/code&gt; or &lt;code&gt;ROLLBACK&lt;/code&gt; command was issued.&lt;/p&gt;
&lt;p&gt;The syntax for ROLLBACK command is as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ROLLBACK&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="savepoint"&gt;SAVEPOINT&lt;/h6&gt;
&lt;p&gt;A SAVEPOINT is a point in a transaction when you can roll the transaction back to a certain point without rolling back the entire transaction.&lt;/p&gt;
&lt;p&gt;The syntax for SAVEPOINT command is as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;SAVEPOINT&lt;/span&gt; &lt;span class="n"&gt;SAVEPOINT_NAME&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This command serves only in the creation of a SAVEPOINT among transactional statements.&lt;/p&gt;
&lt;p&gt;The ROLLBACK command is used to undo a group of transactions.&lt;/p&gt;
&lt;p&gt;The syntax for rolling back to a SAVEPOINT is as follows:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;ROLLBACK&lt;/span&gt; &lt;span class="k"&gt;TO&lt;/span&gt; &lt;span class="n"&gt;SAVEPOINT_NAME&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="release-savepoint"&gt;RELEASE SAVEPOINT&lt;/h6&gt;
&lt;p&gt;The RELEASE SAVEPOINT command is used to &lt;strong&gt;remove&lt;/strong&gt; a &lt;code&gt;SAVEPOINT&lt;/code&gt; that you have created.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;RELEASE&lt;/span&gt; &lt;span class="n"&gt;SAVEPOINT&lt;/span&gt; &lt;span class="n"&gt;SAVEPOINT_NAME&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="set-transaction"&gt;SET TRANSACTION&lt;/h6&gt;
&lt;p&gt;The SET TRANSACTION command can be used to &lt;strong&gt;initiate&lt;/strong&gt; a database transaction.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="n"&gt;TRANSACTION&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="k"&gt;READ&lt;/span&gt; &lt;span class="k"&gt;WRITE&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;READ&lt;/span&gt; &lt;span class="k"&gt;ONLY&lt;/span&gt; &lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="wildcard-in-sql"&gt;WILDCARD IN SQL&lt;/h4&gt;
&lt;h6 id="types"&gt;TYPES&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;%&lt;/code&gt;: Matches &lt;strong&gt;one or more&lt;/strong&gt; characters. Note that MS Access uses the asterisk (&lt;code&gt;*&lt;/code&gt;) wildcard character instead of the percent sign (&lt;code&gt;%&lt;/code&gt;) wildcard character.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;_&lt;/code&gt;: Matches &lt;strong&gt;one&lt;/strong&gt; character. Note that MS Access uses a question mark (&lt;code&gt;?&lt;/code&gt;) instead of the underscore (&lt;code&gt;_&lt;/code&gt;) to match any one character.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The percent sign represents zero, one, or multiple characters. The underscore represents a single number or character. The symbols can be used in combinations.&lt;/p&gt;
&lt;h6 id="example"&gt;Example&lt;/h6&gt;
&lt;p&gt;&lt;code&gt;WHERE SALARY LIKE '2_%_%'&lt;/code&gt;: Finds any values that start with 2 and are at least 3 characters in length&lt;/p&gt;
&lt;h4 id="temporary-table"&gt;TEMPORARY TABLE&lt;/h4&gt;
&lt;p&gt;Temporary Tables are a great feature that lets you store and process intermediate results by using the same selection, update, and join capabilities that you can use with typical SQL Server tables.&lt;/p&gt;
&lt;p&gt;The temporary tables could be very useful in some cases to &lt;strong&gt;keep temporary data&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Temporary tables will be deleted when the current client session terminates.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TEMPORARY&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;SALESSUMMARY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;product_name&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total_sales&lt;/span&gt; &lt;span class="nb"&gt;DECIMAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;avg_unit_price&lt;/span&gt; &lt;span class="nb"&gt;DECIMAL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total_units_sold&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt; &lt;span class="n"&gt;UNSIGNED&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="k"&gt;DEFAULT&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt; &lt;span class="n"&gt;affected&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;When you issue a &lt;code&gt;SHOW TABLES&lt;/code&gt; command, then your temporary table &lt;strong&gt;would not be listed out&lt;/strong&gt; in the list.&lt;/p&gt;
&lt;p&gt;Now if you will log out of the MySQL session and then you will issue a SELECT command, then you will find no data available in the database.&lt;/p&gt;
&lt;p&gt;Even your temporary table would also not exist.&lt;/p&gt;
&lt;p&gt;By default, all the temporary tables are deleted by MySQL when your database connection gets terminated.&lt;/p&gt;
&lt;h4 id="sql-clone-tables"&gt;SQL CLONE TABLES&lt;/h4&gt;
&lt;p&gt;If you are using MySQL RDBMS, you can handle this situation by the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;SHOW CREATE TABLE&lt;/code&gt; command to get a &lt;code&gt;CREATE TABLE&lt;/code&gt; statement that specifies the source table's structure, indexes and all.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Modify the statement to change the table name to that of the clone table and execute the statement. This way you will have exact clone table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Optionally, if you need the table contents copied as well, issue an &lt;code&gt;INSERT INTO ... SELECT&lt;/code&gt; statement, too.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="sql-subquery"&gt;SQL SUBQUERY&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Subquery&lt;/code&gt; or &lt;code&gt;Inner query&lt;/code&gt; or &lt;code&gt;Nested query&lt;/code&gt; is a query within another SQL query and embedded within the WHERE clause.&lt;/p&gt;
&lt;p&gt;There are a few rules that subqueries must follow:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Subqueries must be enclosed within parentheses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A subquery can have only one column in the SELECT clause, unless multiple columns are in the main query for the subquery to compare its selected columns.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;An ORDER BY cannot be used in a subquery, although the main query can use an ORDER BY. The GROUP BY can be used to perform the same function as the ORDER BY in a subquery.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Subqueries that return more than one row can only be used with multiple value operators, such as the IN operator.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The SELECT list cannot include any references to values that evaluate to a BLOB, ARRAY, CLOB, or NCLOB.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A subquery cannot be immediately enclosed in a set function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The BETWEEN operator cannot be used with a subquery; however, the BETWEEN operator can be used within the subquery.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h6 id="select-example"&gt;SELECT EXAMPLE&lt;/h6&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="insert-example"&gt;INSERT EXAMPLE&lt;/h6&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;INSERT&lt;/span&gt; &lt;span class="k"&gt;INTO&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="o"&gt;*|&lt;/span&gt;&lt;span class="n"&gt;column1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;table1&lt;/span&gt; &lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;table2&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;VALUE&lt;/span&gt; &lt;span class="k"&gt;OPERATOR&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="update-example"&gt;UPDATE EXAMPLE&lt;/h6&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;UPDATE&lt;/span&gt; &lt;span class="k"&gt;table&lt;/span&gt;
&lt;span class="k"&gt;SET&lt;/span&gt; &lt;span class="k"&gt;column_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;OPERATOR&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;VALUE&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COLUMN_NAME&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="delete-example"&gt;DELETE EXAMPLE&lt;/h6&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;DELETE&lt;/span&gt; &lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;TABLE_NAME&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="k"&gt;OPERATOR&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;VALUE&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;COLUMN_NAME&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;TABLE_NAME&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="sequence"&gt;SEQUENCE&lt;/h4&gt;
&lt;p&gt;Sequence is &lt;strong&gt;a set of integers&lt;/strong&gt; 1, 2, 3, ... that are generated in order on demand.&lt;/p&gt;
&lt;h6 id="creating"&gt;CREATING&lt;/h6&gt;
&lt;p&gt;The simplest way in MySQL to use sequences is to define a column as &lt;code&gt;AUTO_INCREMENT&lt;/code&gt; and leave rest of the things to MySQL to take care.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;INSECT&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt; &lt;span class="n"&gt;UNSIGNED&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;type&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;insect&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt; &lt;span class="nb"&gt;DATE&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nb"&gt;date&lt;/span&gt; &lt;span class="n"&gt;collected&lt;/span&gt;
&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="nb"&gt;VARCHAR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt; &lt;span class="n"&gt;collected&lt;/span&gt;
&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Query&lt;/span&gt; &lt;span class="n"&gt;OK&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="k"&gt;rows&lt;/span&gt; &lt;span class="n"&gt;affected&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt; &lt;span class="n"&gt;sec&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="renumbering"&gt;RENUMBERING&lt;/h6&gt;
&lt;p&gt;There may be a case when you have deleted many records from a table and you want to resequence all the records.&lt;/p&gt;
&lt;p&gt;This can be done by using a simple trick but you should be very careful to do so if your table is having joins with other table.&lt;/p&gt;
&lt;p&gt;If you determine that resequencing an AUTO_INCREMENT column is unavoidable, the way to do it is to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;drop the column from the table&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add it again.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following example shows how to renumber the id values in the insect
table using this technique:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;INSECT&lt;/span&gt; &lt;span class="k"&gt;DROP&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;insect&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt; &lt;span class="n"&gt;UNSIGNED&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt; &lt;span class="k"&gt;FIRST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;ADD&lt;/span&gt; &lt;span class="k"&gt;PRIMARY&lt;/span&gt; &lt;span class="k"&gt;KEY&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;


&lt;h6 id="assign-start-value"&gt;ASSIGN START VALUE&lt;/h6&gt;
&lt;p&gt;By default, MySQL will start sequence from 1 but you can specify any other number as well at the time of table creation.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt; &lt;span class="nb"&gt;INT&lt;/span&gt; &lt;span class="n"&gt;UNSIGNED&lt;/span&gt; &lt;span class="k"&gt;NOT&lt;/span&gt; &lt;span class="k"&gt;NULL&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Alternative:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;ALTER&lt;/span&gt; &lt;span class="k"&gt;TABLE&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;AUTO_INCREMENT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="duplicates"&gt;DUPLICATES&lt;/h4&gt;
&lt;p&gt;The SQL &lt;code&gt;DISTINCT&lt;/code&gt; keyword, which we already have discussed, is used in conjunction with &lt;code&gt;SELECT&lt;/code&gt; statement to eliminate all the duplicate records and fetching only unique records.&lt;/p&gt;
&lt;p&gt;Syntax:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;SELECT&lt;/span&gt; &lt;span class="k"&gt;DISTINCT&lt;/span&gt; &lt;span class="n"&gt;column1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column2&lt;/span&gt;&lt;span class="p"&gt;,.....&lt;/span&gt;&lt;span class="n"&gt;columnN&lt;/span&gt;
&lt;span class="k"&gt;FROM&lt;/span&gt; &lt;span class="k"&gt;table_name&lt;/span&gt;
&lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;condition&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;


&lt;h4 id="sql-usful-functions"&gt;SQL USFUL FUNCTIONS&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SQL &lt;code&gt;COUNT&lt;/code&gt; Function - The SQL COUNT aggregate function is used to count the number of rows in a database table.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL &lt;code&gt;MAX&lt;/code&gt; Function - The SQL MAX aggregate function allows us to select the highest (maximum) value for a certain column.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL &lt;code&gt;MIN&lt;/code&gt; Function - The SQL MIN aggregate function allows us to select the lowest (minimum) value for a certain column.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL &lt;code&gt;AVG&lt;/code&gt; Function - The SQL AVG aggregate function selects the average value for certain table column.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL &lt;code&gt;SUM&lt;/code&gt; Function - The SQL SUM aggregate function allows selecting the total for a numeric column.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL &lt;code&gt;SQRT&lt;/code&gt; Functions - This is used to generate a square root of a given number.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL &lt;code&gt;RAND&lt;/code&gt; Function - This is used to generate a random number using SQL command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL &lt;code&gt;CONCAT&lt;/code&gt; Function - This is used to concatenate any string inside any SQL command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL &lt;code&gt;Numeric&lt;/code&gt; Functions - Complete list of SQL functions required to manipulate numbers in SQL.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SQL &lt;code&gt;String&lt;/code&gt; Functions - Complete list of SQL functions required to manipulate strings in SQL.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>Database</category><category>SQL</category><guid>https://www.pengyin-shan.com/posts/2015/Data%20Science/sql-basics/</guid><pubDate>Sun, 21 Jun 2015 04:00:00 GMT</pubDate></item><item><title>Install Apache Spark with IPython Notebook Configuration on Ubuntu 15</title><link>https://www.pengyin-shan.com/posts/2015/Data%20Science/ipython-notebook-pyspark/</link><dc:creator>Pengyin(Wendy) Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;After reading a few useful posts and some debugging time, I successfully installed &lt;strong&gt;Apache Spark&lt;/strong&gt; on my Ubuntu 15 machine. I also add &lt;strong&gt;PySpark&lt;/strong&gt; in &lt;strong&gt;IPython Notebook&lt;/strong&gt; for development purpose.&lt;/p&gt;
&lt;p&gt;Many thanks to author of these articles:&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.cloudera.com/blog/2014/08/how-to-use-ipython-notebook-with-apache-spark/"&gt;How-to: Use IPython Notebook with Apache Spark&lt;/a&gt;, written by Uri Laserson.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ramhiser.com/2015/02/01/configuring-ipython-notebook-support-for-pyspark/"&gt;Configuring IPython Notebook Support for PySpark&lt;/a&gt;, written by John Ramey.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://beingzy.github.io/tutorial/2014/10/13/spark-tutorial-Part-I-setting-up-spark-and-ipython-notebook-within-10-minutes.html"&gt;Spark Tutorial (Part I): Setting Up Spark and IPython Notebook within 10 minutes&lt;/a&gt;, written by Yi Zhang.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ipython.org/ipython-doc/dev/config/intro.html"&gt;Introduction to IPython Configuration&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="install-python-and-ipython-notebook"&gt;Install Python and IPython Notebook&lt;/h3&gt;
&lt;p&gt;I highly recommend you using &lt;a href="https://virtualenv.pypa.io/en/latest/"&gt;Virtualenv&lt;/a&gt; or &lt;a href="https://store.continuum.io/cshop/anaconda/"&gt;Anacona&lt;/a&gt; for Python package control.&lt;/p&gt;
&lt;p&gt;You need to install &lt;strong&gt;Python&lt;/strong&gt; and &lt;strong&gt;pip&lt;/strong&gt; first (You can find installation documents through Google Search). Then in terminal, type following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;pip install &lt;span class="s2"&gt;"ipython[notebook]"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;If you want to install everything for IPython, including Notebook, type following in terminal:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;pip install &lt;span class="s2"&gt;"ipython[all]"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;You can test your installation by type following command in terminal (Make sure you are in right environment):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;ipython notebook
&lt;/pre&gt;


&lt;p&gt;Your default browser should open a window with IPython Notebook interface.&lt;/p&gt;
&lt;h3 id="install-spark-and-pyspark"&gt;Install Spark and PySpark&lt;/h3&gt;
&lt;p&gt;You can download Spark from &lt;a href="https://spark.apache.org/downloads.html"&gt;here&lt;/a&gt;. You can install either source code package, or a pre-build package. All packages can be installed and configured for IPython Notebook.&lt;/p&gt;
&lt;p&gt;Pre-build package can be extracted and being used directly. If you download source package, you need to do this after extracting:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; your_spark_source_folder
&lt;span class="gp"&gt;$&lt;/span&gt;sbt/sbt assembly
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;This process may take a while :)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You may need to install &lt;strong&gt;sbt&lt;/strong&gt; first. For Linux user, please refer to this article: &lt;a href="http://www.scala-sbt.org/0.13/tutorial/Installing-sbt-on-Linux.html"&gt;Installing sbt on Linux&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can test your installation by doing following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; your_spark_folder
&lt;span class="gp"&gt;$&lt;/span&gt;./bin/pyspark
&lt;/pre&gt;


&lt;blockquote&gt;
&lt;p&gt;You need java jdk installed on your machine and JAVA_HOME has been set, otherwise PySpark will throw error for that, such as:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;../images/articles/2015/python/hadoop2.6_java_home_dir_problem.png &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Make sure your JAVA_HOME pointing to home folder of your desired JDK. For example, I want to use Oracle JDK 8. So I type &lt;code&gt;sudo update-alternatives --config java&lt;/code&gt; in terminal to find preferred JDK path (JDK 8 in my case), then add&lt;code&gt;export JAVA_HOME=/usr/lib/jvm/java-8-oracle&lt;/code&gt; in &lt;code&gt;.bashrc&lt;/code&gt; file.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You should see following in your terminal. Type &lt;code&gt;sc&lt;/code&gt; and you should see output as &lt;code&gt;SparkContext&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;../images/articles/2015/python/test_pyspark.png &lt;/p&gt;
&lt;h3 id="configure-pyspark-and-ipython-notebook"&gt;Configure PySpark and IPython Notebook&lt;/h3&gt;
&lt;p&gt;Based on my experience, PySpark has good support for Python 2.7, but not Python 3. I recommend you use &lt;strong&gt;Python 2.7&lt;/strong&gt; in this step.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://ramhiser.com/2015/02/01/configuring-ipython-notebook-support-for-pyspark/"&gt;Configuring IPython Notebook Support for PySpark&lt;/a&gt;, written by John Ramey, gave a very good description of steps you need to follow. However, you need to remember doing following:&lt;/p&gt;
&lt;p&gt;In &lt;code&gt;.bashrc&lt;/code&gt; and &lt;code&gt;00-pyspark-setup.py&lt;/code&gt;, make sure you have your own Spark folder name. Check your &lt;code&gt;your_spark_folder/python/lib&lt;/code&gt; for py4j version.&lt;/p&gt;
&lt;p&gt;After you do &lt;code&gt;ipython notebook --profile=pyspark&lt;/code&gt;, you will open Jupyter web interface in your default browser, using the &lt;code&gt;c.NotebookApp.port&lt;/code&gt; in your &lt;code&gt;.bashrc&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;In Jupyter interface, You can upload one existing IPython Notebook to test your configuration by clicking &lt;code&gt;Upload&lt;/code&gt; button, Or create a new IPython Notebook by clicking &lt;code&gt;new&lt;/code&gt; button, then select &lt;code&gt;Python 2&lt;/code&gt; or &lt;code&gt;Python 3&lt;/code&gt; in drop-down menu.&lt;/p&gt;
&lt;p&gt;In IPython Notebook interface, create a new cell and type &lt;code&gt;sc&lt;/code&gt;. When you run this cell, you should see &lt;code&gt;SparkContext&lt;/code&gt; object, same as following:&lt;/p&gt;
&lt;p&gt;../images/articles/2015/python/test_pyspark_notebook.png &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Now, if your IPython Notebook show message: &lt;code&gt;NameError: name 'sc' is not defined&lt;/code&gt;, which means your IPython Notebook doesn't use PySpark profile. You can try typing &lt;code&gt;ipython --profile=pyspark&lt;/code&gt; in terminal to make PySpark as default IPython profile, then try &lt;code&gt;ipython notebook --profile=pyspark&lt;/code&gt; again. PySpark should be available now.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/div&gt;</description><category>Data Science</category><category>IPython</category><category>Python</category><category>Spark</category><guid>https://www.pengyin-shan.com/posts/2015/Data%20Science/ipython-notebook-pyspark/</guid><pubDate>Wed, 10 Jun 2015 04:00:00 GMT</pubDate></item><item><title>How to Build A Basic Nikola Blog and Deploy to Github Page</title><link>https://www.pengyin-shan.com/posts/2015/Data%20Science/how-to-build-a-basic-nikola-blog-and-deloy-to-github-page/</link><dc:creator>Pengyin(Wendy) Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;One of my goal for 2015 is to learn Python. To prepare for this, I decided to create a new blog site, based on Python.&lt;/p&gt;
&lt;p&gt;After doing some research, I decide to use &lt;a href="http://getnikola.com/"&gt;&lt;strong&gt;Nikola&lt;/strong&gt;&lt;/a&gt; to build my blog. One of the reason I choose Nikola is that it has great support to &lt;strong&gt;IPython Notebook&lt;/strong&gt;.&lt;/p&gt;
&lt;h5 id="lots-of-thanks-to-damian-avila-your-blog-is-so-useful-and-great-for-nikola-beginners-like-me"&gt;Lots of Thanks to &lt;a href="http://www.damian.oquanta.info/"&gt;Damian Avila&lt;/a&gt;! Your blog is so useful and great for Nikola beginners like me!&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;1. Create Virtual Environment&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before you install Nikola, a good practice is to build a virual environment. You can install &lt;strong&gt;Virtualenv&lt;/strong&gt; and use it. Since I had &lt;strong&gt;Anaconda&lt;/strong&gt; installed, I just type &lt;code&gt;conda create -n techblog python=3.4 anaconda&lt;/code&gt; to create a virtual environment called "techblog" with python 3.4. You can define your own name and python version.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2. Install Nikola and Necessary Component&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;First, make sure you use your virtual enviorment. command is:&lt;/em&gt; &lt;code&gt;source activate name_of_environment&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I suggest you to use &lt;strong&gt;pip&lt;/strong&gt; to install followiing components:
- nikola
- requests
- sphinx
- pyzmq
- tornado(?)
- jinja2
- webassets (if you want to use USE_BUNDLES)
- markdown (if you want to use markdown)
- ipython (if you want to use ipython notebook)&lt;/p&gt;
&lt;p&gt;For example, you type follwing command in your terminal: &lt;code&gt;pip install nikola requests sphinx markdown ipython pyzmq tornado jinja2 webasset&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In the next following steps, make sure you are under your virtual environment.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3. Initialize Nikola&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;nikola init&lt;/code&gt; in your terminal, where you want to build your site in a &lt;em&gt;subfolder&lt;/em&gt; of current location.&lt;/p&gt;
&lt;p&gt;You will be asked following questions:
- Destination: Name of the folder your site will be
- Site Title
- Site Author
- Author's Email
- Site Description
- Site URL: This is the url that when you click header of your site, the page will jump to. You can set this later in &lt;strong&gt;conf.py&lt;/strong&gt; file. If you type one, make sure it ends with a &lt;em&gt;/&lt;/em&gt;.
- Default Language: I use &lt;strong&gt;en&lt;/strong&gt; but you can refer Nikola website for more option.
- Time Zone: Short name for your time zone. I use &lt;strong&gt;EST&lt;/strong&gt;. For example.
- Comment System: Nikola support popular comment system such as &lt;em&gt;Disqus&lt;/em&gt;, &lt;em&gt;Google+&lt;/em&gt; and &lt;em&gt;Facebook&lt;/em&gt;. You will be asked to enter &lt;em&gt;comment system site identifier&lt;/em&gt; if required.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4. Change Theme (Optional)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If you want to change theme of your website, You can find a list of themes from &lt;a href="http://themes.getnikola.com/"&gt;Nikiola Website&lt;/a&gt;. Note any theme that has &lt;em&gt;ipython&lt;/em&gt; in its name supports IPython Notebook.&lt;/p&gt;
&lt;p&gt;Then, do &lt;code&gt;cd your_folder&lt;/code&gt; to get to the folder that Nikola just created for you.&lt;/p&gt;
&lt;p&gt;Type &lt;code&gt;nikola install_theme name_of_theme&lt;/code&gt; to install theme.&lt;/p&gt;
&lt;p&gt;You may need to change some setting in &lt;strong&gt;conf.py&lt;/strong&gt; file, so read instructions in your terminal carefully.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. Configure and Build Site&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;First, open &lt;strong&gt;conf.py&lt;/strong&gt; file and configure it as your requests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you didn't do some setup in step 3 in terminal, you can found them here. For example, you can re-edit &lt;strong&gt;SITE_URL&lt;/strong&gt; if you haven't done so.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have installed new theme and want to change to it, change &lt;strong&gt;THEME=&lt;/strong&gt; option to your installed theme. Some theme may also want you to change &lt;strong&gt;NAVIGATION_LINKS&lt;/strong&gt; or other settings.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you want to use IPython Notebook or Markdown, find &lt;strong&gt;POSTS =&lt;/strong&gt; option and add &lt;code&gt;("posts/*.md", "posts", "post.tmpl"),("posts/*.ipynb", "posts", "post.tmpl"),&lt;/code&gt;. &lt;em&gt;If you don't need lots of new pages, I suggest you not change PAGES setting.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set &lt;strong&gt;INDEX_TEASERS = &lt;/strong&gt; to &lt;strong&gt;True&lt;/strong&gt; to enable teaser. Now you can just put &lt;code&gt;.. TEASER_END&lt;/code&gt; or &lt;code&gt;&amp;lt;!--TEASER_END--&amp;gt;&lt;/code&gt; in your post to make index page only show first part of your post&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have installed &lt;strong&gt;webassets&lt;/strong&gt;, you can set &lt;strong&gt;USE_BUNDLES=&lt;/strong&gt; to &lt;strong&gt;True&lt;/strong&gt; to speed up your site.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I skip the process of creating new post. Note if you create a IPython Notebook post, you can edit information such as slugs, dates, tags in &lt;strong&gt;.meta&lt;/strong&gt; file, which is automatically generated with &lt;strong&gt;.ipynb&lt;/strong&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now you can type &lt;code&gt;nikola build&lt;/code&gt; to build your site. A list of rendered file will appear.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;What user can see from your website is in &lt;strong&gt;output&lt;/strong&gt; folder.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you have any external file, such as &lt;strong&gt;PDF&lt;/strong&gt; or &lt;strong&gt;IMAGE&lt;/strong&gt;, you can put it in &lt;strong&gt;files&lt;/strong&gt; folder.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After building, you can type &lt;code&gt;nikola serve&lt;/code&gt; to host your site locally. By default, you site can be open from &lt;code&gt;http://localhost:8000/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;6. Deploy Site to Github Pages&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I find great help from &lt;a href="http://www.damian.oquanta.info/posts/one-line-deployment-of-your-site-to-gh-pages.html"&gt;solution of Damian's blog&lt;/a&gt;. I used his method to deploy this site to one of my Github page.&lt;/p&gt;
&lt;p&gt;Please make sure you do follwing steps except git initiate every time you want to make change:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;First, create a repository. You can use default "user.github.io" repo, but since I prefer a &lt;strong&gt;project Github Page&lt;/strong&gt;, so I create a repo called "techblog".&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After installed &lt;strong&gt;Git&lt;/strong&gt; to your machine, &lt;code&gt;cd&lt;/code&gt; to your site folder, then type &lt;code&gt;git init&lt;/code&gt; to initiate.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do &lt;code&gt;git remote add origin https://github.com/your_user_name/your_repo.git&lt;/code&gt; to add repo, with a name &lt;em&gt;origin&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push all of your content to &lt;strong&gt;master&lt;/strong&gt; branch first&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do &lt;code&gt;git checkout -b gh-pages&lt;/code&gt; to create and swich to gh-pages. You can skip &lt;code&gt;-b&lt;/code&gt; after you do this once.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do &lt;code&gt;git rm -rf .&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do &lt;code&gt;git commit -am "Your Commit"&lt;/code&gt; to commit for gh-pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do &lt;code&gt;git push origin gh-pages&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do &lt;code&gt;git checkout master&lt;/code&gt; to switch back to master branch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do &lt;code&gt;git branch -D gh-pages&lt;/code&gt; first to avoid commit error. (I tried to skip this step before but I got a git commit error, so I suggest you do this step first)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do &lt;code&gt;git subtree split --prefix output -b gh-pages&lt;/code&gt; to only transfer content in &lt;strong&gt;output&lt;/strong&gt; folder from master to gh-pages&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do &lt;code&gt;git push -f origin gh-pages:gh-pages&lt;/code&gt; to force push&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do &lt;code&gt;git branch -D gh-pages&lt;/code&gt; again to delete local gh-pages branch&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;7. Add Custom Domain to Your Github Page (Optional)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;You may want to add custom domain to your Github page. Github has a tutorial &lt;a href="https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/"&gt;here&lt;/a&gt;. Since I'm hosting my domain (pengyin-shan.com) on GoDaddy, I followed instructions &lt;a href="http://captainwhippet.com/blog/2014/05/11/blog-setup-details.html"&gt;in this blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;A few things I want to mention:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;CNAME&lt;/strong&gt; file should be put to your &lt;strong&gt;files&lt;/strong&gt; folder so that when you following steps above to push to Github, this file will show in gh-pages branch.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The content of &lt;strong&gt;CNAME&lt;/strong&gt; file should be bare subdomain of your custom domain, which means you &lt;em&gt;can not&lt;/em&gt; use &lt;code&gt;http://test.com&lt;/code&gt; or &lt;code&gt;http:test.com/blog&lt;/code&gt;. You can only have one custdom domain.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I think based on Github's role, even though you are hosting project Github pages, your custom domain has to be "test.com" instead of "test.com/name_of_repo"&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Jan 1st, 2015, the IP address of &lt;strong&gt;Github Project Page&lt;/strong&gt; are &lt;code&gt;192.30.252.153&lt;/code&gt; and &lt;code&gt;192.30.152.154&lt;/code&gt;. If you have A (Host), make sure your &lt;code&gt;@&lt;/code&gt; is pointing to these two IPs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you finish these settings, you should be able to host your Nikola blog on Github Page. Please feel free to let me know if you have any comments.&lt;/p&gt;&lt;/div&gt;</description><category>Github</category><category>Nikola</category><category>Python</category><guid>https://www.pengyin-shan.com/posts/2015/Data%20Science/how-to-build-a-basic-nikola-blog-and-deloy-to-github-page/</guid><pubDate>Tue, 13 Jan 2015 05:00:00 GMT</pubDate></item><item><title>Use Amazon EC2 to Host IPython Notebook</title><link>https://www.pengyin-shan.com/posts/2015/Data%20Science/use-amazon-ec2-to-host-ipython-notebook/</link><dc:creator>Pengyin(Wendy) Shan</dc:creator><description>&lt;div&gt;&lt;p&gt;Recentely I read a great article about &lt;a href="https://gist.github.com/iamatypeofwalrus/5183133"&gt;Hosting IPython Notebook on Amazon AWS Free Tier from Scratch&lt;/a&gt;. This tutorial explains the way to host IPython Notebook using a Amazon EC2 Micro Instance.&lt;/p&gt;
&lt;p&gt;I followed this tutorial and successfully hosted an IPython notebook on a Ubuntu 14 Guest AMI. I want to record some of important steps I took while following this tutorial:&lt;/p&gt;
&lt;p&gt;Note: You can use &lt;strong&gt;nano&lt;/strong&gt; to edit &lt;code&gt;ipython_notebook_config.py&lt;/code&gt; file. It is located at &lt;code&gt;~/.ipython/profile_nbserver/&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id="security-group"&gt;Security Group&lt;/h3&gt;
&lt;p&gt;When you set up rules for &lt;em&gt;Security Groups&lt;/em&gt;, make sure you include &lt;code&gt;SSH&lt;/code&gt;, &lt;code&gt;HTTPS&lt;/code&gt; and &lt;code&gt;8888&lt;/code&gt; all of these. Lack of one can make your IPython Notebook fail. If you forget to do so when you set up the machine, you can set up later in your EC2 management console.&lt;/p&gt;
&lt;h3 id="elastic-ip"&gt;Elastic Ip&lt;/h3&gt;
&lt;p&gt;The tutorial suggest you link an &lt;strong&gt;Elastic IP&lt;/strong&gt; to your instance so that everytime you try to access your instance in browser, you can type new ip address instead of long public DNS.&lt;/p&gt;
&lt;p&gt;To do this, click &lt;strong&gt;Elastic IPs&lt;/strong&gt; option in you EC2 Dashboard menu, which is in &lt;strong&gt;NETWORK &amp;amp; SECURITY&lt;/strong&gt; section. On right panel, click &lt;strong&gt;Allocate New Address&lt;/strong&gt; button. Then click &lt;strong&gt;Yes&lt;/strong&gt; in the pop-up window.&lt;/p&gt;
&lt;p&gt;Now a IP address should be generated. Rememeber to &lt;em&gt;associate&lt;/em&gt; your instance with this IP address. Select this IP address, then click &lt;strong&gt;Associate Address&lt;/strong&gt; button. A pop-up window will appear. Click &lt;strong&gt;Instance&lt;/strong&gt; then select your instance in drop-dowm menu. You can also do other setting here. Click &lt;strong&gt;Associate&lt;/strong&gt; to associate your instance to this IP.&lt;/p&gt;
&lt;p&gt;Now you just need to type: &lt;code&gt;https://your_elastic_ip:port_number&lt;/code&gt; to your IPython Notebook.&lt;/p&gt;
&lt;h3 id="make-ipython-run-as-service"&gt;Make IPython Run as Service&lt;/h3&gt;
&lt;p&gt;You may want you IPython notebook still works after you shutdown your terminal/SSH. I got solution from this &lt;a href="http://stackoverflow.com/questions/16418477/how-to-keep-server-running-on-ec2-after-ssh-is-terminated"&gt;StackOverflow post&lt;/a&gt;. I got &lt;strong&gt;screen&lt;/strong&gt; by typing &lt;code&gt;sudo apt-get install screen&lt;/code&gt;, then do &lt;code&gt;ipython server &amp;amp;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If this not work for you, try &lt;code&gt;screen ipython s&lt;/code&gt; instead&lt;/p&gt;&lt;/div&gt;</description><category>Amazon EC2</category><category>Python</category><guid>https://www.pengyin-shan.com/posts/2015/Data%20Science/use-amazon-ec2-to-host-ipython-notebook/</guid><pubDate>Tue, 13 Jan 2015 05:00:00 GMT</pubDate></item></channel></rss>